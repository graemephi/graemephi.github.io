<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>maths on graeme. hello</title><link>https://graemephi.github.io/tags/maths/</link><description>Recent content in maths on graeme. hello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 27 Sep 2024 20:08:28 +0000</lastBuildDate><atom:link href="https://graemephi.github.io/tags/maths/index.xml" rel="self" type="application/rss+xml"/><item><title>Generating Unique Random Numbers</title><link>https://graemephi.github.io/posts/unique-random-numbers/</link><pubDate>Fri, 27 Sep 2024 20:08:28 +0000</pubDate><guid>https://graemephi.github.io/posts/unique-random-numbers/</guid><description>&lt;blockquote class="aside">&lt;p>This post has two things:&lt;/p>
&lt;ol>
&lt;li>Two somewhat obscure non-linear invertible operations that work on only part of a register, and&lt;/li>
&lt;li>A fast stateless random permutation generator that uses them, and passes some statistical tests for RNGs you may have seen before&lt;/li>
&lt;/ol>
&lt;p>The ideas are pretty simple so the hope is you can also get an intuition for how to think about the problem, which is the best thing you can get out of this post.&lt;/p>
&lt;p>I got my intuition from these:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://burtleburtle.net/bob/rand/talksmall.html">Bob Jenkins' talk&lt;/a> on writing hash functions,&lt;/li>
&lt;li>&lt;a href="https://marc-b-reynolds.github.io/math/2017/10/13/IntegerBijections.html">Marc B Reynolds' post&lt;/a> on integer bijections (everything in this post is an integer bijection),&lt;/li>
&lt;li>Brent Burley&amp;rsquo;s &lt;a href="https://jcgt.org/published/0009/04/01/">Practical Hash-based Owen Scrambling&lt;/a>, highly recommend this one if you like path tracing,&lt;/li>
&lt;li>&lt;a href="https://andrew-helmer.github.io/permute/">Andrew Helmer&amp;rsquo;s blog post&lt;/a> about Andrew Kensler&amp;rsquo;s &lt;code>permute&lt;/code> in this &lt;a href="https://graphics.pixar.com/library/MultiJitteredSampling/paper.pdf">correlated multi-jitter paper&lt;/a>. Helmer&amp;rsquo;s post is where I first saw this idea, I think.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Random numbers that don&amp;rsquo;t repeat. Let me explain the basic idea first before I get into the weeds. We decide to generate unique random numbers in &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mi>N&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">[0, N)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>, here 8, by shuffling this list of numbers:
&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>2&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>3&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>4&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>5&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>6&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>7&lt;/mn>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">(0,1,2,3,4,5,6,7)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">3&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">4&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">5&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">6&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">7&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
Adding the same number mod &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> to every element gives us back a new list with the same elements in a different order,
&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>2&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>3&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>4&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>5&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>6&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>7&lt;/mn>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>+&lt;/mo>&lt;mn>3&lt;/mn>&lt;mspace>&lt;/mspace>&lt;mspace width="1em"/>&lt;mrow>&lt;mi mathvariant="normal">m&lt;/mi>&lt;mi mathvariant="normal">o&lt;/mi>&lt;mi mathvariant="normal">d&lt;/mi>&lt;/mrow>&lt;mtext> &lt;/mtext>&lt;mtext> &lt;/mtext>&lt;mn>8&lt;/mn>&lt;mo>=&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>3&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>4&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>5&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>6&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>7&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>2&lt;/mn>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">(0,1,2,3,4,5,6,7) + 3 \mod 8 = (3,4,5,6,7,0,1,2)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">3&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">4&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">5&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">6&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">7&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">3&lt;/span>&lt;span class="mspace allowbreak">&lt;/span>&lt;span class="mspace" style="margin-right:1em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathrm">m&lt;/span>&lt;span class="mord mathrm">o&lt;/span>&lt;span class="mord mathrm">d&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">8&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">3&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">4&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">5&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">6&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">7&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
And so does multiplying by an odd number, mod &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>,
&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>3&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>4&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>5&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>6&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>7&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>2&lt;/mn>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>∗&lt;/mo>&lt;mn>5&lt;/mn>&lt;mspace>&lt;/mspace>&lt;mspace width="1em"/>&lt;mrow>&lt;mi mathvariant="normal">m&lt;/mi>&lt;mi mathvariant="normal">o&lt;/mi>&lt;mi mathvariant="normal">d&lt;/mi>&lt;/mrow>&lt;mtext> &lt;/mtext>&lt;mtext> &lt;/mtext>&lt;mn>8&lt;/mn>&lt;mo>=&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>7&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>4&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>6&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>3&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>5&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>2&lt;/mn>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">(3,4,5,6,7,0,1,2) * 5 \mod 8 = (7,4,1,6,3,0,5,2)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">3&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">4&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">5&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">6&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">7&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">∗&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">5&lt;/span>&lt;span class="mspace allowbreak">&lt;/span>&lt;span class="mspace" style="margin-right:1em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathrm">m&lt;/span>&lt;span class="mord mathrm">o&lt;/span>&lt;span class="mord mathrm">d&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">8&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">7&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">4&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">6&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">3&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">5&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
And this now looks pretty shuffled. So, take in the original numbers one at a time, apply these and other bijections the same way on each number, and out the other end we get a pseudorandom permutation without using any memory. We never need to construct the initial list.&lt;/p>
&lt;p>The operations we can use are any that can be undone (any shuffle can be re-sorted), so you hear people call them bijections and invertible functions interchangeably.&lt;/p>
&lt;p>I got interested in this after looking at the low discrepancy sequence stuff, but I brushed off the connection in &lt;a href="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/">my post&lt;/a> about it. With the tools there, its easy to generate numbers that don&amp;rsquo;t repeat but hard to make them random. That is, you could feed truly random bits in and you&amp;rsquo;d randomly select from a small set of random-looking sequences, which is not what we want. At the time, I didn&amp;rsquo;t know much about this problem, just that what I was doing didn&amp;rsquo;t work. This &lt;a href="https://www.ea.com/seed/news/constant-time-stateless-shuffling">EA Seed post of Alan Wolfe and William Donnelly&lt;/a> that uses Feistel networks got me interested again. The thing that really got me is that quality/speed trade-off they mention: what does it take to max out the quality? How can you tell you&amp;rsquo;ve reached it? Rather than answer these questions I made my own that always maxes the quality out.&lt;/p>
&lt;p>To do that you need some organising principle. Mine is this: use all your bits.&lt;/p>
&lt;p>What do I mean by this?&lt;/p>
&lt;p>In the above example we have 8 numbers we can do an add with, from which we get 3 bits worth of permutations. The multiply is 2 bits, we lose a bit due to the odd constraint. We won&amp;rsquo;t miss it for larger &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>. To choose these randomly we need 5 random bits, for 32 possible multiply-adds. That&amp;rsquo;s 32 different permutations we can get after one multiply-add, and, yes, any sequence of multiply-adds can be replaced by just one multiply-add, so out of these two operations we can&amp;rsquo;t get more than 32 permutations. No matter how many random bits we have with which to choose different madds, we&amp;rsquo;ll always end up with a sequence that can be reduced to a choice made with just 5 bits. Any more than that bits than that are wasted. We haven&amp;rsquo;t used them.&lt;/p>
&lt;p>There are &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>8&lt;/mn>&lt;mo stretchy="false">!&lt;/mo>&lt;mo>=&lt;/mo>&lt;mn>42320&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">8! = 42320&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">8&lt;/span>&lt;span class="mclose">!&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">4&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord">3&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span> permutations of length 8.&lt;/p>
&lt;h2 id="feistel-networks-entropy-and-so-on">Feistel networks, entropy, and so on&lt;/h2>
&lt;p>What Feistel networks do is give you non-linear bijections, and you can turn the crank on them to get as many permutations as you want. How many turns of the crank you need can be found in this &lt;a href="https://arxiv.org/abs/2106.06161">2022 Mitchell et al. paper &lt;/a> that adapts &lt;a href="https://dl.acm.org/doi/10.1145/2063384.2063405">philox&lt;/a> to generate permutations. Philox is (mostly) a Feistel network. To get good statistics, turns out it&amp;rsquo;s quite a lot: they want 24. This is the kind of round count you see in cryptography. What gives?&lt;/p>
&lt;p>In a Feistel network, you split each number into two halves, one half that keys a round function and another half that gets permuted with a xor. This means to know how one number is scrambled by the round function, you only need to know half the bits in each step, and &lt;em>this&lt;/em> means you get effectively half the entropy out of each round you could be getting (see this footnote if you are suspicious&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>). But this structure also makes it super easy to invert, which is very useful for encryption, right. For permutations of length 5, the function in the Mitchell paper will use 72 bits of entropy (and asks for some 700 bits that it just won&amp;rsquo;t use). You need 7 bits to index all 120 permutations!!&lt;/p>
&lt;p>This half-the-bits thing is important and is a good example of the kind of thinking you want to being doing when making these things, so, here. This is to illustrate something about bijections and the Feistel part isn&amp;rsquo;t super important so I&amp;rsquo;m not going to go in detail on that. Look:
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/unique-random-numbers/feistel.png" width="424" height="411" loading="lazy" />
&lt;/div>
&lt;/p>
&lt;p>This is a single round with the 8-bit input using a xor by some arbitrary function &lt;code>f&lt;/code> as the round function. One Feistel round permutes only the blue box to produce the purple box; the orange box remains unchanged in the output and the low bits reappear, unchanged, as the new high bits. That&amp;rsquo;s what I&amp;rsquo;m talking about in the previous paragraph. But if you stare at this a while you may realise there are only 16 ways that purple box can end up, and the only thing &lt;code>f&lt;/code> and &lt;code>seed&lt;/code> can do is make the choice more or less predictable. This is the important part: a better choice of &lt;code>f&lt;/code> can&amp;rsquo;t give you more permutations than that. If you only do this one thing, then each round you get at most 16x new permutations, and they&amp;rsquo;re the same new permutations regardless of &lt;code>f&lt;/code>. A bad choice of &lt;code>f&lt;/code> might fall short of all 16x, but ruling those out, the thing a better choice of &lt;code>f&lt;/code> is giving you is a more unpredictable order with respect to &lt;code>seed&lt;/code>.&lt;/p>
&lt;p>And that might sound good but for most &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> there are so many permutations we don&amp;rsquo;t care about the order. If the order you see permutations in matters, that&amp;rsquo;s bias. There are just too many permutations for it to be otherwise. I&amp;rsquo;ll get back to this point later.&lt;/p>
&lt;blockquote class="aside">&lt;p>I say a Feistel network will require too many bits, but it turns out to be really hard to use the minimal number of bits. Since I&amp;rsquo;ve brought this up, check this out. How many bits will the Fisher-Yates shuffle use? It&amp;rsquo;s the standard shuffle, and there used to be a little ecosystem of blog posts on how careless implementations could give bad statistics. My goal with this post is to match Fisher-Yates statistics-wise. (&lt;a href="https://en.wikipedia.org/wiki/Fisher-Yates_shuffle">Code from Wikipedia&lt;/a>, why not):&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">-- To shuffle an array a of n elements (indices 0..n-1):
for i from 0 to n−2 do
j ← random integer such that i ≤ j &amp;lt; n
exchange a[i] and a[j]
&lt;/code>&lt;/pre>&lt;p>On the first iteration, we generate a number between &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">0&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>, so &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mo>&lt;mi>log&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\log_2 N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.93858em;vertical-align:-0.24414em;">&lt;/span>&lt;span class="mop">&lt;span class="mop">lo&lt;span style="margin-right:0.01389em;">g&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.20696799999999996em;">&lt;span style="top:-2.4558600000000004em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.24414em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> bits are needed to describe the number of possible outcomes of the first iteration. The second is between &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">N,&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;/span>&lt;/span>&lt;/span> that&amp;rsquo;s &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mo>&lt;mi>log&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>N&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\log_2(N - 1)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mop">&lt;span class="mop">lo&lt;span style="margin-right:0.01389em;">g&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.20696799999999996em;">&lt;span style="top:-2.4558600000000004em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.24414em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> bits, and it&amp;rsquo;s smaller because we have one less possible values to choose from, right. Continue like this, then by the end we&amp;rsquo;ve used&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>2&lt;/mn>&lt;/mrow>&lt;/munderover>&lt;msub>&lt;mo>&lt;mi>log&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>N&lt;/mi>&lt;mo>−&lt;/mo>&lt;mi>i&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>2&lt;/mn>&lt;/mrow>&lt;mi>N&lt;/mi>&lt;/munderover>&lt;msub>&lt;mo>&lt;mi>log&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mi>i&lt;/mi>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;msub>&lt;mo>&lt;mi>log&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msub>&lt;munderover>&lt;mo>∏&lt;/mo>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>2&lt;/mn>&lt;/mrow>&lt;mi>N&lt;/mi>&lt;/munderover>&lt;mi>i&lt;/mi>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;msub>&lt;mo>&lt;mi>log&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mi>N&lt;/mi>&lt;mo stretchy="false">!&lt;/mo>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;annotation encoding="application/x-tex">
\begin{aligned}
\sum_{i=0}^{N - 2} \log_2(N - i) &amp;amp;=
\sum_{i=2}^{N} \log_2 i \\
&amp;amp;= \log_2\prod_{i=2}^N i \\
&amp;amp;= \log_2 N!
\end{aligned}
&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:8.31201em;vertical-align:-3.9060050000000004em;">&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-r">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:4.406005em;">&lt;span style="top:-6.406005em;">&lt;span class="pstrut" style="height:3.828336em;">&lt;/span>&lt;span class="mord">&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8283360000000004em;">&lt;span style="top:-1.872331em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.050005em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.300005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.277669em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">&lt;span class="mop">lo&lt;span style="margin-right:0.01389em;">g&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.20696799999999996em;">&lt;span style="top:-2.4558600000000004em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.24414em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord mathdefault">i&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3.828336em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;span style="top:-0.5823309999999999em;">&lt;span class="pstrut" style="height:3.828336em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:3.9060050000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="col-align-l">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:4.406005em;">&lt;span style="top:-6.406005em;">&lt;span class="pstrut" style="height:3.828336em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8283360000000002em;">&lt;span style="top:-1.872331em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.050005em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.3000050000000005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.277669em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">&lt;span class="mop">lo&lt;span style="margin-right:0.01389em;">g&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.20696799999999996em;">&lt;span style="top:-2.4558600000000004em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.24414em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">i&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3.828336em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mop">&lt;span class="mop">lo&lt;span style="margin-right:0.01389em;">g&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.20696799999999996em;">&lt;span style="top:-2.4558600000000004em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.24414em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8283360000000002em;">&lt;span style="top:-1.872331em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.050005em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∏&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.3000050000000005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.277669em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">i&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-0.5823309999999999em;">&lt;span class="pstrut" style="height:3.828336em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mop">&lt;span class="mop">lo&lt;span style="margin-right:0.01389em;">g&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.20696799999999996em;">&lt;span style="top:-2.4558600000000004em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.24414em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mclose">!&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:3.9060050000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>bits of entropy. Exactly enough bits for the &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo stretchy="false">!&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">N!&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mclose">!&lt;/span>&lt;/span>&lt;/span>&lt;/span> possible permutations: if you interpret the bits it draws as a number, then that number directly indexes into the big Lehmer-list in the sky of permutations of size &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>. So, assuming we could draw a fractional number of bits from an RNG, this shuffle is optimal in the number of bits it will use. Something that took me a while to realise is that the exact same reasoning applies to figuring out the minimum number of bits it would take to encode the next value in a permutation, given those you&amp;rsquo;ve already seen. :o&lt;/p>
&lt;p>We won&amp;rsquo;t get anywhere close to this lower bound, in both senses: for small &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> I&amp;rsquo;ll use too many bits, and for large &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>, well, nobody ever will get close to using enough.&lt;/p>
&lt;p>If all this talk of bits and entropy is lost on you: read David MacKay&amp;rsquo;s &lt;a href="https://www.inference.org.uk/itprnn/">Inference book&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Anyway, all that&amp;rsquo;s why I went looking for other ways to map bits to bijections. My thinking is this: using cheaper non-linear bijections that operate on all the bits at once can produce more random lookin' permutations per unit time. The space of permutations that can be sampled &lt;em>at all&lt;/em> can expand up to twice as quickly by having no half-width bottlenecks.&lt;/p>
&lt;h2 id="two-invertible-operations">Two invertible operations&lt;/h2>
&lt;h4 id="1">1&lt;/h4>
&lt;p>Everyone into this junk knows odd multiplies are invertible and even multiplies aren&amp;rsquo;t. That&amp;rsquo;s wrong: even multiplies are perfectly invertible. It&amp;rsquo;s only after truncating the bits that don&amp;rsquo;t fit in the register that invertibility is lost. They don&amp;rsquo;t have invertibility &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mtext>mod &lt;/mtext>&lt;msup>&lt;mn>2&lt;/mn>&lt;mi>b&lt;/mi>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">\text{mod } 2^b&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.849108em;vertical-align:0em;">&lt;/span>&lt;span class="mord text">&lt;span class="mord">mod &lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.849108em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">b&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>, but here, &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>b&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">b&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;/span>&lt;/span>&lt;/span> is probably small, and there is still plenty of register left over. So, don&amp;rsquo;t truncate: shift.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">a : value to permute
k : random bits, or constant, whatever
m = (1 &amp;lt;&amp;lt; bitwidth(a)) - 1 (mask for getting a back into range)
k_low_bits = (k &amp;amp; -k) - 1 (turn trailing zeros into a mask)
k += ((k &amp;amp; m) == 0) (fix up if k is 0)
ak = a * k (multiply)
a = ak + ((ak &amp;gt;&amp;gt; bits) &amp;amp; k_low_bits) (rotate)
&lt;/code>&lt;/pre>&lt;p>Spelled out: even multiplies can be split into two operations, an odd multiply and a left shift; the shift amount is the number of trailing zeros. To restore invertibility we could shift back to undo that shift, but this lands it back at an odd multiply so we&amp;rsquo;re still down a bit. Instead, do a rotate, by shifting the bits otherwise masked out into the low bits that were just zeroed out by the multiply.&lt;/p>
&lt;p>This is fine as is for small bit-widths, but if &lt;code>bitwidth(a)&lt;/code> is greater than the half the register width then &lt;code>k&lt;/code> can have so many trailing zeros that the multiply runs out of register. For &lt;code>bitwidth(a)&lt;/code> up at like 30 then it can only handle at most 2 trailing zeros. We don&amp;rsquo;t care about the missing bit that much in that case, so just detect when there are too many trailing zeros and turn it into a multiply by one:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">km = m &amp;amp; (~0u &amp;gt;&amp;gt; bits) (note, km == m when bits &amp;lt; regsiter width / 2)
k += ((k &amp;amp; km) == 0) (new fix up)
&lt;/code>&lt;/pre>&lt;p>This is getting a bit complicated. The up shot is we get an almost full-bit multiply and a non-linearity out of it. &amp;lsquo;Almost&amp;rsquo; because we still can&amp;rsquo;t multiply by zero. To underscore the point a bit, the shift amount is constant with respect to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> but the effective rotation amount depends on &lt;code>k&lt;/code>.&lt;/p>
&lt;p>If you choose &lt;code>k&lt;/code> randomly then the random rotates we get follow a geometric distribution: &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>1&lt;/mn>&lt;mi mathvariant="normal">/&lt;/mi>&lt;mn>2&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">1/2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">/&lt;/span>&lt;span class="mord">2&lt;/span>&lt;/span>&lt;/span>&lt;/span> chance the first bit is zero, &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>1&lt;/mn>&lt;mi mathvariant="normal">/&lt;/mi>&lt;mn>4&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">1/4&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">/&lt;/span>&lt;span class="mord">4&lt;/span>&lt;/span>&lt;/span>&lt;/span> the first and second bit are both zero, &amp;hellip; So it&amp;rsquo;s usually 0, 1 or 2. That works well here because it means it just works for all &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>&amp;ndash;for small &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>, if we only have, say, 3 bits then we can only do rotates of 1 or 2 bits, so if we have a lot of larger rotates we aren&amp;rsquo;t getting the non-linearities we want. Likewise for large &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>, where we need to avoid shifting away bits at the opposite end, we don&amp;rsquo;t have to worry about that happening often either. But for other &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> we&amp;rsquo;d really like to get bits moving in different ways. So there&amp;rsquo;s room for improvement, maybe.&lt;/p>
&lt;h4 id="2">2&lt;/h4>
&lt;p>The second invertible operation I&amp;rsquo;d like to point out is actually a repeat from &lt;a href="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/">last time&lt;/a>, where it appeared in the Laine-Karras scramble (and I got it from the &lt;a href="https://jcgt.org/published/0009/04/01/">Brent Burley&lt;/a> paper originally). But this time I got to it by thinking: the above is using the low zero bits of &lt;code>k&lt;/code> as the shift amount. Can we swap our operands around and use the low zero bits of &lt;code>a&lt;/code> as the shift amount? Then we&amp;rsquo;d get a varying rotate per &lt;code>a&lt;/code>. But I couldn&amp;rsquo;t figure out a way to use that idea that was actually invertible. However in a moment of zen I realized the following is invertible:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">a ^= (a * k) &amp;lt;&amp;lt; 1
&lt;/code>&lt;/pre>&lt;p>Which is exactly equivalent to the multiplication by even constants in the nested uniform scramble.&lt;/p>
&lt;p>This is pretty interesting in that, if you look at it like a Feistel function, then rather than splitting up the permutation into equal sized classes indexed by half the bits, it splits it into classes indexed by the number of trailing zeros in &lt;code>a&lt;/code>. Not only are the classes shuffled independently, so values in one class stay in that class, each class is a different size. Within each, the permute is driven by the multiply. (Sorry if all this is a bit abstract all of a sudden).&lt;/p>
&lt;p>But in light of what I said before about Feistel networks I will use it like this, because the bits in &lt;code>k&lt;/code> are valuable:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">a ^= ((a * k) &amp;lt;&amp;lt; 1) ^ k
&lt;/code>&lt;/pre>&lt;p>So that&amp;rsquo;s two bijections. One is a little complicated code-wise but is really simple conceptually; an odd multiply followed by a rotate. It&amp;rsquo;s easy to see why it&amp;rsquo;s invertible. One is simple code-wise and is complicated conceptually; I don&amp;rsquo;t know what to call it. It&amp;rsquo;s a bit more subtle I think.&lt;/p>
&lt;h2 id="permute">permute&lt;/h2>
&lt;p>To use these, I need to define the problem. We want to &lt;strong>randomly sample permutations&lt;/strong>, uniformly and independently. For small &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>, this means sometimes sampling 0, 1, 2, 3, 4&amp;hellip; as a random permutation. So, that&amp;rsquo;s a stateless function like this, where &lt;code>seed&lt;/code> enumerates permutations in a pseudorandom order.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#a6e22e">permute&lt;/span>(&lt;span style="color:#66d9ef">uint32_t&lt;/span> i, &lt;span style="color:#66d9ef">uint32_t&lt;/span> N, &lt;span style="color:#66d9ef">uint32_t&lt;/span> seed);
&lt;span style="color:#75715e">// Usage:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">uint32_t&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> N; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#66d9ef">uint32_t&lt;/span> index &lt;span style="color:#f92672">=&lt;/span> permute(i, N, seed);
&lt;span style="color:#75715e">// ... use index
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Secondary goal is that it should just work. No need to seed it well. Cycle walking for non powers of two&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>The idea is that generating pseudorandom bits is expensive, so do it once at the start, and shift out the generated bits from a register as a source of entropy. Then use each bit of entropy at least once. I found the two bijections above weren&amp;rsquo;t enough on their own for good avalanche so I gray code between each use of entropy bits:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#a6e22e">hash32&lt;/span>(&lt;span style="color:#66d9ef">uint32_t&lt;/span> x) {
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>;
x &lt;span style="color:#f92672">*=&lt;/span> &lt;span style="color:#ae81ff">0x21f0aaad&lt;/span>;
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>;
x &lt;span style="color:#f92672">*=&lt;/span> &lt;span style="color:#ae81ff">0xd35a2d97&lt;/span>;
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> x;
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#a6e22e">log2_floor&lt;/span>(&lt;span style="color:#66d9ef">uint32_t&lt;/span> a) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">31u&lt;/span> &lt;span style="color:#f92672">-&lt;/span> _lzcnt_u32(a);
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#a6e22e">log2_ceil&lt;/span>(&lt;span style="color:#66d9ef">uint32_t&lt;/span> a) {
&lt;span style="color:#66d9ef">return&lt;/span> log2_floor(a &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1u&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1u&lt;/span>;
}
&lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#a6e22e">permute&lt;/span>(&lt;span style="color:#66d9ef">uint32_t&lt;/span> i, &lt;span style="color:#66d9ef">uint32_t&lt;/span> n, &lt;span style="color:#66d9ef">uint32_t&lt;/span> seed) {
&lt;span style="color:#66d9ef">uint32_t&lt;/span> bits &lt;span style="color:#f92672">=&lt;/span> log2_ceil(n);
&lt;span style="color:#66d9ef">uint32_t&lt;/span> mask &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">1u&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> bits) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1u&lt;/span>;
&lt;span style="color:#66d9ef">uint32_t&lt;/span> multiplier_mask &lt;span style="color:#f92672">=&lt;/span> mask &lt;span style="color:#f92672">&amp;amp;&lt;/span> (&lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#ae81ff">0u&lt;/span> &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> bits);
&lt;span style="color:#66d9ef">uint32_t&lt;/span> index_seed &lt;span style="color:#f92672">=&lt;/span> (i &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> bits) &lt;span style="color:#f92672">^&lt;/span> n;
&lt;span style="color:#66d9ef">uint32_t&lt;/span> state0 &lt;span style="color:#f92672">=&lt;/span> seed &lt;span style="color:#f92672">+&lt;/span> index_seed;
&lt;span style="color:#66d9ef">uint32_t&lt;/span> state1 &lt;span style="color:#f92672">=&lt;/span> hash32(index_seed &lt;span style="color:#f92672">-&lt;/span> seed);
&lt;span style="color:#66d9ef">do&lt;/span> {
&lt;span style="color:#66d9ef">uint32_t&lt;/span> state &lt;span style="color:#f92672">=&lt;/span> state0;
&lt;span style="color:#66d9ef">uint32_t&lt;/span> rounds &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;span style="color:#66d9ef">while&lt;/span> (rounds&lt;span style="color:#f92672">--&lt;/span>) {
&lt;span style="color:#66d9ef">uint32_t&lt;/span> p &lt;span style="color:#f92672">=&lt;/span> state;
&lt;span style="color:#66d9ef">do&lt;/span> {
&lt;span style="color:#66d9ef">uint32_t&lt;/span> q &lt;span style="color:#f92672">=&lt;/span> p;
p &lt;span style="color:#f92672">&amp;gt;&amp;gt;=&lt;/span> bits;
&lt;span style="color:#66d9ef">uint32_t&lt;/span> r &lt;span style="color:#f92672">=&lt;/span> p &lt;span style="color:#f92672">^&lt;/span> state;
p &lt;span style="color:#f92672">&amp;gt;&amp;gt;=&lt;/span> bits;
&lt;span style="color:#66d9ef">uint32_t&lt;/span> s &lt;span style="color:#f92672">=&lt;/span> p &lt;span style="color:#f92672">^&lt;/span> state;
p &lt;span style="color:#f92672">&amp;gt;&amp;gt;=&lt;/span> bits;
q &lt;span style="color:#f92672">&amp;amp;=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#ae81ff">1u&lt;/span>;
q &lt;span style="color:#f92672">+=&lt;/span> ((q &lt;span style="color:#f92672">&amp;amp;&lt;/span> multiplier_mask) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0u&lt;/span>) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">uint32_t&lt;/span> q_lb &lt;span style="color:#f92672">=&lt;/span> (q &lt;span style="color:#f92672">&amp;amp;&lt;/span> (&lt;span style="color:#ae81ff">0u&lt;/span> &lt;span style="color:#f92672">-&lt;/span> q)) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1u&lt;/span>;
i &lt;span style="color:#f92672">^=&lt;/span> ((i &lt;span style="color:#f92672">*&lt;/span> p) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">^&lt;/span> p;
i &lt;span style="color:#f92672">^=&lt;/span> (i &lt;span style="color:#f92672">&amp;amp;&lt;/span> mask) &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">uint32_t&lt;/span> iqr &lt;span style="color:#f92672">=&lt;/span> (i &lt;span style="color:#f92672">*&lt;/span> q) &lt;span style="color:#f92672">+&lt;/span> r;
i &lt;span style="color:#f92672">=&lt;/span> iqr &lt;span style="color:#f92672">+&lt;/span> ((i &lt;span style="color:#f92672">^&lt;/span> (iqr &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> bits)) &lt;span style="color:#f92672">&amp;amp;&lt;/span> q_lb);
i &lt;span style="color:#f92672">^=&lt;/span> (i &lt;span style="color:#f92672">&amp;amp;&lt;/span> mask) &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;
i &lt;span style="color:#f92672">^=&lt;/span> ((i &lt;span style="color:#f92672">*&lt;/span> s) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">^&lt;/span> s;
i &lt;span style="color:#f92672">^=&lt;/span> (i &lt;span style="color:#f92672">&amp;amp;&lt;/span> mask) &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>;
} &lt;span style="color:#66d9ef">while&lt;/span> (p);
state &lt;span style="color:#f92672">=&lt;/span> state1;
}
i &lt;span style="color:#f92672">&amp;amp;=&lt;/span> mask;
} &lt;span style="color:#66d9ef">while&lt;/span> (i &lt;span style="color:#f92672">&amp;gt;=&lt;/span> n);
&lt;span style="color:#66d9ef">return&lt;/span> i;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I kept it all within 32-bits to make it easier to analyze. It doesn&amp;rsquo;t work for &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo>&amp;gt;&lt;/mo>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>31&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">N &amp;gt; 2^{31}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.72243em;vertical-align:-0.0391em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">&amp;gt;&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. If you want that, go to 64-bits. Replace the hash and add&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">i &lt;span style="color:#f92672">^=&lt;/span> (i &lt;span style="color:#f92672">&amp;amp;&lt;/span> mask) &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>somewhere. One benefit of having no constants is it&amp;rsquo;s clear how to extend this thing to higher bit counts.&lt;/p>
&lt;h3 id="fiddly-detail">Fiddly detail&lt;/h3>
&lt;blockquote class="aside">&lt;p>The high bits in the index would otherwise go to waste so I use them as more seed bits, so each seed really defines a sequence of permutations per &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>, rather than just one permutation per &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>.&lt;/p>
&lt;p>The &lt;code>log2_ceil&lt;/code> is a little exotic in a non-systems language context but it is pretty much free here with &lt;code>lzcnt&lt;/code>, you probably want to pass it in precomputed if it or an equivalent instruction is not available, the alternatives really dent the speed of this thing. &lt;a href="https://stackoverflow.com/a/51351885">It&amp;rsquo;s from Travis Downs&lt;/a>.&lt;/p>
&lt;p>The hash function is one of those &lt;a href="https://nullprogram.com/blog/2018/07/31/">prospecting for hash functions&lt;/a> hashes. The way I use it, you can see you could also pull it out precomputed once for the whole permutation, if you really wanted to.&lt;/p>
&lt;p>As well as the add, I sneak in a xor of the original bits in middle of the multiply-rotate. Philox-y. And there&amp;rsquo;s always at least 1 bit of rotation.&lt;/p>
&lt;p>I don&amp;rsquo;t like the &lt;code>while (p)&lt;/code>, I&amp;rsquo;d rather use a fixed number of iterations derived from &lt;code>n&lt;/code>. As it is, larger &lt;code>n&lt;/code> shift bits out faster and stop earlier. But it will also stop early if the state becomes 0. It works better statistics-for-time this way, which I don&amp;rsquo;t really understand.&lt;/p>
&lt;/blockquote>
&lt;h3 id="justifications">Justifications&lt;/h3>
&lt;p>For &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> larger than 12, 32 bits is not enough seeds to index every permutation, so it&amp;rsquo;s fine to fall short of hitting every permutation, so long as the sampling is&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> unbiased.&lt;/p>
&lt;p>To be unbiased we need this: it doesn&amp;rsquo;t matter how you seed this thing. Consecutive seeds must produce permutations that are uncorrelated. It doesn&amp;rsquo;t take long before the space of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo stretchy="false">!&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">N!&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mclose">!&lt;/span>&lt;/span>&lt;/span>&lt;/span> permutations it&amp;rsquo;s supposed to be sampling from is so vast that all &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>32&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{32}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> permutations are a vanishingly small subset. So, if nearby seeds are correlated, we already know we are sampling from a biased sample of all permutations. That&amp;rsquo;s why I use the seed directly in the first round: we could hash it, and this will probably give us better &lt;code>(state0, state1)&lt;/code> pairs to use (there are &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>64&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{64}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">6&lt;/span>&lt;span class="mord mtight">4&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> such pairs and we&amp;rsquo;ll use &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>32&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{32}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> of them), but there is no simple way to avoid having many mostly-zero states in one side of the pair; all we can control is what order we get them in.&lt;/p>
&lt;p>For that reason, I don&amp;rsquo;t think we can get away with using only 32 bits of state, even though we&amp;rsquo;ll only ever map to 32 bits worth of permutations. If we hash, we can use an invertible hash to guarantee each seed maps to unique hash bits. But this means we just shuffled the low-entropy seeds around. Or we use a non-invertible hash, and we know for sure some seeds map to the same permutation&amp;ndash;can&amp;rsquo;t be having it. Even if we pack this thing to the gills with intimidating constants, a low entropy seed will mean we land on a permutation near (in some sense) to the default permutation selected by the constants.&lt;/p>
&lt;p>Expanding the seed an extra 32 bits solves all this.&lt;/p>
&lt;p>To get an idea for why we really cannot have any correlations period, think about lexicographically sorting all the permutations and looking for correlations between nearby seeds. If &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>500&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">N = 500&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">5&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span> then for the first 10 values we have &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mrow>&lt;mo fence="true">(&lt;/mo>&lt;mfrac linethickness="0px">&lt;mn>500&lt;/mn>&lt;mn>10&lt;/mn>&lt;/mfrac>&lt;mo fence="true">)&lt;/mo>&lt;/mrow>&lt;mo>&amp;gt;&lt;/mo>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>67&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">{500 \choose 10} &amp;gt; 2^{67}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:2.40003em;vertical-align:-0.95003em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mopen delimcenter" style="top:0em;">&lt;span class="delimsizing size3">(&lt;/span>&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.32144em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">1&lt;/span>&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">5&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.686em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose delimcenter" style="top:0em;">&lt;span class="delimsizing size3">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">&amp;gt;&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8641079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">6&lt;/span>&lt;span class="mord mtight">7&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> possible permutation-heads, so by the 11th value we expect the sorted permutations to be completely uncorrelated again.&lt;/p>
&lt;p>The restriction to 32-bit integers is somewhat artificial but it also enabled reasoning like the above that I&amp;rsquo;m not sure I&amp;rsquo;d have got to without it.&lt;/p>
&lt;h2 id="testing-these-things">Testing these things&lt;/h2>
&lt;p>A quick test that will fail most ideas you come up with is to generate permutations of size 8, each value is 3 bits so you only need 24 bits to represent an entire permutation. Generate a bunch, pack each into an int and compare the number of unique ints you get to unique numbers from a PRNG in &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>8&lt;/mn>&lt;mo stretchy="false">!&lt;/mo>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">[0, 8!)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">8&lt;/span>&lt;span class="mclose">!&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>. Or math it out, but we&amp;rsquo;re all friends here. This fails &lt;code>permute&lt;/code> when using a single round.&lt;/p>
&lt;p>To get an idea for the behaviour with larger &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> you can make a &lt;a href="https://bost.ocks.org/mike/shuffle/compare.html">matrix diagram&lt;/a> that visualises how often a each input index gets mapped to each output index. This works but I found you could look good here while still being biased (this is true of avalanche as well). Instead, try this: look for correlations between adjacent indices. So, instead of counting &lt;code>(i, permute(i))&lt;/code> pairs, count &lt;code>(permute(i), permute(i + 1))&lt;/code> pairs. Somewhat interestingly, since these are always different, the pairs this gives you form a particular kind of permutation called a &lt;a href="https://en.wikipedia.org/wiki/Derangement">derangement&lt;/a>. With that said, here&amp;rsquo;s &lt;code>permute&lt;/code> with only 1 round, &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>1024&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">N=1024&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord">4&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>16&lt;/mn>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">16N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">6&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> consecutive seeds near 0:
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/unique-random-numbers/urn_seq_1.png" width="1024" height="1024" loading="lazy" />
&lt;/div>
&lt;blockquote class="aside">Scaled down by &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>2&lt;/mn>&lt;mo>⋅&lt;/mo>&lt;mn>16&lt;/mn>&lt;mi>N&lt;/mi>&lt;mo>⋅&lt;/mo>&lt;mfrac>&lt;mn>1&lt;/mn>&lt;mrow>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>N&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;/mfrac>&lt;/mrow>&lt;annotation encoding="application/x-tex">2\cdot16N\cdot\frac{1}{(N-1)}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">6&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.365108em;vertical-align:-0.52em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.845108em;">&lt;span style="top:-2.655em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mopen mtight">(&lt;/span>&lt;span class="mord mathdefault mtight" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;span class="mclose mtight">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.394em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.52em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> which puts the expected average at &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>0.5&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">0.5&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">5&lt;/span>&lt;/span>&lt;/span>&lt;/span>. And fed through the &lt;code>BrGB&lt;/code> colour map from matplotlib which is white in the middle. It&amp;rsquo;s much more clear what&amp;rsquo;s going on compared to grayscale.&lt;/blockquote>
&lt;/p>
&lt;p>The zeros along the diagonal are expected, as it&amp;rsquo;s a derangement. But it&amp;rsquo;s not quite there yet, note that near the diagonal it is slightly darker and undersampled.
Here&amp;rsquo;s two rounds:
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/unique-random-numbers/urn_seq_2.png" width="1024" height="1024" loading="lazy" />
&lt;/div>
&lt;/p>
&lt;p>👍. These are all the seeds around zero&amp;ndash;all ones, all zeros, 31 ones, 31 zeros, that kind of junk.&lt;/p>
&lt;p>The last test I like is for small &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>, counting repeat permutations. Similar to the first test but more involved to actually implement. This is an interesting test because when we randomly sample permutations of length &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>13&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">13&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>, there are more than &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>32&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{32}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> permutations to sample but the number of samples before we expect to see a repeat is far less than &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>32&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{32}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. Knuth in TAOCP somewhere has an approximate formula for this
&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>Q&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>N&lt;/mi>&lt;mo stretchy="false">!&lt;/mo>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>∼&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo>+&lt;/mo>&lt;msqrt>&lt;mfrac>&lt;mrow>&lt;mi>π&lt;/mi>&lt;mi>N&lt;/mi>&lt;mo stretchy="false">!&lt;/mo>&lt;/mrow>&lt;mn>2&lt;/mn>&lt;/mfrac>&lt;/msqrt>&lt;mo>+&lt;/mo>&lt;mtext> &lt;/mtext>&lt;mo>…&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">Q(N!) \sim 1 + \sqrt{\frac{\pi N!}{2}} +\space\dots&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">Q&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mclose">!&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">∼&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.72777em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:2.44em;vertical-align:-0.7634050000000001em;">&lt;/span>&lt;span class="mord sqrt">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.6765949999999998em;">&lt;span class="svg-align" style="top:-4.4em;">&lt;span class="pstrut" style="height:4.4em;">&lt;/span>&lt;span class="mord" style="padding-left:1em;">&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.37144em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">π&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mclose">!&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.686em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.6365950000000002em;">&lt;span class="pstrut" style="height:4.4em;">&lt;/span>&lt;span class="hide-tail" style="min-width:1.02em;height:2.48em;">&lt;svg width='400em' height='2.48em' viewBox='0 0 400000 2592' preserveAspectRatio='xMinYMin slice'>&lt;path d='M424,2478
c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514
c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20
s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121
s209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081
l0 -0c4,-6.7,10,-10,18,-10 H400000
v40H1014.6
s-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185
c-2,6,-10,9,-24,9
c-8,0,-12,-0.7,-12,-2z M1001 80
h400000v40h-400000z'/>&lt;/svg>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.7634050000000001em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mspace"> &lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.12em;vertical-align:0em;">&lt;/span>&lt;span class="minner">…&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
which is also &lt;a href="https://en.wikipedia.org/wiki/Birthday_problem#Average_number_of_people_to_get_at_least_one_shared_birthday">lurking on the Wikipedia article on the birthday problem&lt;/a>. From this you get that only after &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo>&amp;gt;&lt;/mo>&lt;mn>21&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">N &amp;gt; 21&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.72243em;vertical-align:-0.0391em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">&amp;gt;&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span> or &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>22&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">22&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord">2&lt;/span>&lt;/span>&lt;/span>&lt;/span> or so is it reasonable to map each seed to a unique permutation, as &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>Q&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>21&lt;/mn>&lt;mo stretchy="false">!&lt;/mo>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>≈&lt;/mo>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>33&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">Q(21!) \approx 2^{33}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">Q&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mclose">!&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">≈&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8641079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> but &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>Q&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>20&lt;/mn>&lt;mo stretchy="false">!&lt;/mo>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>≈&lt;/mo>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>31&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">Q(20!)\approx 2^{31}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">Q&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mclose">!&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">≈&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8641079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>Between 13 and 20, in order to look statistically right, we need to be producing repeats&amp;ndash;even though there are more permutations than seeds!!&lt;/p>
&lt;p>This test is the hardest I&amp;rsquo;ve found to pass: an older function I had was a real slow thing with some Feistel rounds that looked otherwise good, and this test failed it at &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>19&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">N = 19&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">9&lt;/span>&lt;/span>&lt;/span>&lt;/span>. Unfailing it is how I got to the multiply-rotate. At the time I was looking at gaps, but &lt;a href="https://www.pcg-random.org/posts/birthday-test.html">M.E. O&amp;rsquo;Neill points out you can also count repeats&lt;/a> and tells you how many samples to take and how to compute p-values so let&amp;rsquo;s just use that. I&amp;rsquo;m going to dump a table on you now. Each row looks at consecutive seeds starting at &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">0&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>N&lt;/th>
&lt;th>samples&lt;/th>
&lt;th>dupes&lt;/th>
&lt;th>expected&lt;/th>
&lt;th>unique_dupes&lt;/th>
&lt;th>p&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>16&lt;/td>
&lt;td>10&lt;/td>
&lt;td>10.32&lt;/td>
&lt;td>4&lt;/td>
&lt;td>0.54&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>31&lt;/td>
&lt;td>14&lt;/td>
&lt;td>13.42&lt;/td>
&lt;td>8&lt;/td>
&lt;td>0.63&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>70&lt;/td>
&lt;td>19&lt;/td>
&lt;td>16.80&lt;/td>
&lt;td>16&lt;/td>
&lt;td>0.75&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>170&lt;/td>
&lt;td>21&lt;/td>
&lt;td>18.49&lt;/td>
&lt;td>18&lt;/td>
&lt;td>0.76&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>449&lt;/td>
&lt;td>18&lt;/td>
&lt;td>19.38&lt;/td>
&lt;td>18&lt;/td>
&lt;td>0.44&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>1270&lt;/td>
&lt;td>16&lt;/td>
&lt;td>19.78&lt;/td>
&lt;td>16&lt;/td>
&lt;td>0.24&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>3810&lt;/td>
&lt;td>13&lt;/td>
&lt;td>19.93&lt;/td>
&lt;td>13&lt;/td>
&lt;td>0.07&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>12048&lt;/td>
&lt;td>14&lt;/td>
&lt;td>19.98&lt;/td>
&lt;td>14&lt;/td>
&lt;td>0.11&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>11&lt;/td>
&lt;td>39959&lt;/td>
&lt;td>19&lt;/td>
&lt;td>19.99&lt;/td>
&lt;td>19&lt;/td>
&lt;td>0.47&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12&lt;/td>
&lt;td>138420&lt;/td>
&lt;td>19&lt;/td>
&lt;td>20.00&lt;/td>
&lt;td>19&lt;/td>
&lt;td>0.47&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13&lt;/td>
&lt;td>499080&lt;/td>
&lt;td>20&lt;/td>
&lt;td>20.00&lt;/td>
&lt;td>20&lt;/td>
&lt;td>0.56&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14&lt;/td>
&lt;td>1867387&lt;/td>
&lt;td>16&lt;/td>
&lt;td>20.00&lt;/td>
&lt;td>16&lt;/td>
&lt;td>0.22&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15&lt;/td>
&lt;td>7232357&lt;/td>
&lt;td>19&lt;/td>
&lt;td>20.00&lt;/td>
&lt;td>19&lt;/td>
&lt;td>0.47&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>28929425&lt;/td>
&lt;td>19&lt;/td>
&lt;td>20.00&lt;/td>
&lt;td>19&lt;/td>
&lt;td>0.47&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>17&lt;/td>
&lt;td>119279073&lt;/td>
&lt;td>12&lt;/td>
&lt;td>20.00&lt;/td>
&lt;td>12&lt;/td>
&lt;td>0.04&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>506058246&lt;/td>
&lt;td>20&lt;/td>
&lt;td>20.00&lt;/td>
&lt;td>20&lt;/td>
&lt;td>0.56&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>19&lt;/td>
&lt;td>2205856754&lt;/td>
&lt;td>26&lt;/td>
&lt;td>20.00&lt;/td>
&lt;td>26&lt;/td>
&lt;td>0.92&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>20&lt;/td>
&lt;td>4294967295&lt;/td>
&lt;td>5&lt;/td>
&lt;td>3.79&lt;/td>
&lt;td>5&lt;/td>
&lt;td>0.82&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>21&lt;/td>
&lt;td>4294967295&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0.18&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0.99&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>22&lt;/td>
&lt;td>4294967295&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0.01&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0.99&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Yeh: looks random. The p-value breaks down a bit towards the end there because we are taking so few (!!) samples, but whatever. The &lt;code>unique_dupes&lt;/code> column is just a sanity check that we aren&amp;rsquo;t getting the same repeated permutation.&lt;/p>
&lt;p>Counting repeats from all &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>32&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{32}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> permutations turns out to be a bit non-trivial. &lt;a href="https://graemephi.github.io/posts/unique-random-numbers/count.cpp">Code is here if you want&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;ve been less thorough with testing really large &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>. I dunno. Avalanche isn&amp;rsquo;t really a great test here, necessary but not sufficient type beat.&lt;/p>
&lt;h2 id="end">End&lt;/h2>
&lt;p>I&amp;rsquo;ve been sitting on this draft unpublished for a while now. I picked up some entropy intuition sometime around writing my low discrepancy noise post, I was trying to figure out why the permutations you can get out of xorshift and LCGs are so bad.&lt;/p>
&lt;p>It&amp;rsquo;s invertible, but I have no idea what the inverse function will look like.&lt;/p>
&lt;p>I was aiming for the performance to be around the same as Andrew Kensler&amp;rsquo;s permute, the correlated multi-jitter one. By the way, if you understood what I was talking about with the Feistel bits thing you can just eyeball it to get an idea of the permutations you&amp;rsquo;ll get out of it. My permute is about 2x slower, or 1.4x if you let the optimizer precompute the seed hash for you. Given the statistical quality I&amp;rsquo;m after I think this is alright, I can just throw this thing at people and not worry about them seeding it wrong or whatever. I think you can do better speed-wise but I don&amp;rsquo;t know how much better.&lt;/p>
&lt;p>And the small &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> thing. Why the focus on that? Couldn&amp;rsquo;t you just shuffle an array every time for those? Like, sure, maybe, but really my issue is: if you can&amp;rsquo;t nail the small &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> case where it&amp;rsquo;s easy to verify the statistics are good, why would you think large &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> is any better? Okay that&amp;rsquo;s it. ThaNKS for reading&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>This sidesteps the fact that over the permutation as a whole you get the full bit-width worth of bits of entropy. It&amp;rsquo;s only the path through state space taken by neighbouring values that are bit-deficient. For 8 bits, you&amp;rsquo;d have a 4 bits worth of round functions that each map 4 bits to 4 bits. 16 round functions times 16 possible outputs each is 8 bits total to describe the full permutation. Each round function is totally independent of what the other round functions are doing, and it&amp;rsquo;s only the number of bits required to encode the path a given value takes that is half that required to encode the entire permutation. Really weird.
&lt;br>
&lt;br>
This alone isn&amp;rsquo;t enough to explain the high round counts you see in practice. Interestingly, if you ask instead about the average number of bits that will be flipped then the required round counts come out close to what you see empirically&amp;hellip; but is that just a coincidence??&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Rejection sampling is faster, and even fast on the GPU as that Michell paper points out. I think it&amp;rsquo;s better statistics-wise too; it just can&amp;rsquo;t be dropped in and used anywhere.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>indistinguishable from an unbiased sample until we exhaust the seed space. Do you care about this distinction? Did I need to add it?&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>WTF Are Modular Forms</title><link>https://graemephi.github.io/posts/modular-forms/</link><pubDate>Mon, 25 Mar 2024 00:34:54 +0000</pubDate><guid>https://graemephi.github.io/posts/modular-forms/</guid><description>&lt;blockquote class="aside">&lt;p>This post is part of the &lt;a href="https://handmade.network/jam/learning-2024">HMN Learning Jam&lt;/a>. One weekend to fill your head with stuff and one weekend to dump it back out. I&amp;rsquo;ve spent a few more days here and there (that convinced me I could learn the rest of what I needed to know in a weekend) but otherwise that&amp;rsquo;s about how much time I&amp;rsquo;ve got in knowing about modular forms. This is a bit out of step from the rest of the submissions which are more programming focused but look: someone had to.&lt;/p>
&lt;p>As always happens I probably learned the most while I was writing this post and not when I was reading stuff.&lt;/p>
&lt;p>I&amp;rsquo;m gonna take a very non-standard approach that I&amp;rsquo;ve seen fragments of here and there in the Literature, so experts on this stuff know it all, but the path it takes is so irrelevant to what working with modular forms is &lt;em>actually like&lt;/em> that a mathematician would never be so cruel as to present it this way.&lt;/p>
&lt;p>However, I&amp;rsquo;m not a mathematician and am completely new to all this. From what I can tell, this path I&amp;rsquo;ll take here is closer to what was going on when modular forms first appeared in mathematics 200 years ago. It&amp;rsquo;s pretty far removed from modern day modular forms. But this means we get to see what modular forms &lt;em>are&lt;/em> in a certain naive sense that hopefully doesn&amp;rsquo;t require a degree in mathematics to understand.&lt;/p>
&lt;p>To get the most out of this, you want to know a a little linear algebra and be comfortable with complex numbers. You should also probably read the first half with a graphing calculator open. On the other hand, I&amp;rsquo;ve deliberately avoided some convenient mathematics notations/definitions that make maths inaccessible to many people, which makes life harder for and probably people that know that stuff.&lt;/p>
&lt;p>The two books I found most useful for this are:&lt;/p>
&lt;ul>
&lt;li>Development of Mathematics in the 19th Century, Felix Klein,1928&lt;/li>
&lt;li>Complex Analysis, Elias M. Stein and Rami Shakarchi, 2003&lt;/li>
&lt;/ul>
&lt;p>The first is by the Klein bottle guy. He was pretty much there when modular forms became modular forms and is where I got this general approach from. He&amp;rsquo;s more brisk about it. Cool book, could not have understood any of this without it.&lt;/p>
&lt;p>Complex Analysis is a textbook for undergraduates. Goes slow in the right places. Really well written if you know how to read maths textbooks.&lt;/p>
&lt;p>Another book I&amp;rsquo;d like to recommend that you&amp;rsquo;ll probably have trouble discovering on your own is&lt;/p>
&lt;ul>
&lt;li>Elliptic Curves, Henry McKean &amp;amp; Victor Moll, 1999&lt;/li>
&lt;/ul>
&lt;p>This is in my preferred style for maths textbooks, which I have heard called &amp;ldquo;breezy&amp;rdquo; before. Some people figure out they&amp;rsquo;ve got a tiny audience and write conversationally directly to them, it&amp;rsquo;s great. No sweating on proofs, just big picture ideas from people fully in the &lt;a href="https://terrytao.wordpress.com/career-advice/theres-more-to-mathematics-than-rigour-and-proofs/">post-rigorous&lt;/a> phase of life, and they trust you have dryer references to fall back on if you need them. But it is squarely aimed at real deal mathematicians so beyond me for the most part.&lt;/p>
&lt;p>A cool resource is &lt;a href="https://www.youtube.com/watch?v=f8pjt9ivjjc&amp;amp;list=PL8yHsr3EFj51HisRtNyzHX-Xyg6I3Wl2F&amp;amp;pp=iAQB">Richard E Borcherds lecture series&lt;/a> on youtube if you want to see what it&amp;rsquo;s really about to a mathematician. He&amp;rsquo;s got a Fields medal in this stuff.&lt;/p>
&lt;p>Another cool video is this &lt;a href="https://www.youtube.com/watch?v=z7A_bSl8kIw">MathKiwi video&lt;/a> which in some sense starts where I leave off and has many good visualisations.&lt;/p>
&lt;p>To round this list out &lt;a href="https://mathoverflow.net/questions/24604/why-are-modular-forms-interesting">here&amp;rsquo;s a bunch of mathematicians saying what they find interesting about modular forms&lt;/a>. Check out how many different angles on them there are.&lt;/p>
&lt;/blockquote>
&lt;p>I can&amp;rsquo;t motivate why you&amp;rsquo;d want to know about modular forms. If you want to know this stuff, you want to know, and if you don&amp;rsquo;t, you don&amp;rsquo;t. Instead, I want to start at a basic number theory question and make a bee line for modular forms. Modular forms come from a few related ideas hanging together, so we&amp;rsquo;ll have to gather up those ideas first.&lt;/p>
&lt;p>Here&amp;rsquo;s our number theory question: given an integer &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>, how many solutions does
&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mi>n&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>a&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>+&lt;/mo>&lt;msup>&lt;mi>b&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">n^2 = a^2 + b^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8641079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8641079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">b&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>have? I start here because it makes the link to questions like these and Fermat&amp;rsquo;s Last Theorem clear, but I am going to say well clear of any weird factorisations and algebra that usually immediately follow this question, don&amp;rsquo;t worry.&lt;/p>
&lt;p>What a lot of number theorists like to do when encountering something new is to compute large tables of numbers, and here since you never have to look at &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>a&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">a&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">a&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>b&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">b&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;/span>&lt;/span>&lt;/span> above &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span> you don&amp;rsquo;t have that many &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>a&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>b&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">(a,b)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> pairs to check. Well, for a few &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>, anyway. You can get pretty far along crunching numbers. Then you stare at the numbers and hope for insight. &lt;a href="https://www.quantamagazine.org/elliptic-curve-murmurations-found-with-ai-take-flight-20240305/">This works surprisingly well&lt;/a>.&lt;/p>
&lt;p>But instead the way to modular forms is to draw the sucker. This turns it into the following question: on how many places does the circle
&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mi>n&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>x&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>+&lt;/mo>&lt;msup>&lt;mi>y&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">n^2 = x^2 + y^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8641079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>lie on integer coordinates? Now instead of crunching numbers, you just draw a circle on a grid. Solutions are where the circle lies on a point where the grid lines intersect. That set of points of intersection over the entire &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>x&lt;/mi>&lt;mi>y&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">xy&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;/span>&lt;/span>&lt;/span> plane is called a lattice.&lt;/p>
&lt;p>The year is 1799 and we would like to solve this problem with a straightedge and compass. We dutifully draw the grid. We try it for one &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>, fill in the row in our table, try a second &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>, fill in the next row&amp;hellip; Number theorists love their tables. Eventually, &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span> is too big for our compass. What do? We shrink the lattice. Instead of ever larger circles we ask about ever denser lattices. And instead of leaving this as just a convenience out in the world, we can make it real in the mathematics, and change the problem to looking for rational numbers that satisfy&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mfrac>&lt;msup>&lt;mi>x&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;msup>&lt;mi>n&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mfrac>&lt;mo>+&lt;/mo>&lt;mfrac>&lt;msup>&lt;mi>y&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;msup>&lt;mi>n&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mfrac>&lt;mo>=&lt;/mo>&lt;mn>1.&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">\frac{x^2}{n^2} + \frac{y^2}{n^2} = 1.&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:2.177108em;vertical-align:-0.686em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.491108em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.740108em;">&lt;span style="top:-2.9890000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.686em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:2.177108em;vertical-align:-0.686em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.491108em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.740108em;">&lt;span style="top:-2.9890000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.686em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>Play with this a bit in a graphing calculator and you&amp;rsquo;ll realise that once you&amp;rsquo;ve found a solution you can extend a line through it from the origin, and lattice points on that line are solutions for some other &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>. So something about the lattice is encoding information about the sums of two squares.&lt;/p>
&lt;p>With lattice we encountered the first term that comes up all the time when people talk about modular forms, and maybe see how it&amp;rsquo;s relevant to number theory, so we are making progress.&lt;/p>
&lt;p>So, that&amp;rsquo;s a circle. For this exposition I would like to encourage you to act like a mathematician and be willing to entertain idle questions. What about where an ellipse goes through a lattice point? We apply a similar trick as before, and get an axis-aligned ellipse by stretching &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>x&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">x&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>y&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">y&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;/span>&lt;/span>&lt;/span>, with &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mi>n&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>=&lt;/mo>&lt;mi>a&lt;/mi>&lt;msup>&lt;mi>x&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>+&lt;/mo>&lt;mi>b&lt;/mi>&lt;msup>&lt;mi>y&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n^2 = ax^2 + by^2.&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8641079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>Instead of drawing the ellipse, we stretch the lattice in &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>x&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">x&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>y&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">y&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and we are back to a circle. So we think of an ellipse as a transformed circle, and apply the inverse transform to the lattice instead, and this let&amp;rsquo;s us answer more questions with our compass. Very good.&lt;/p>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/modular-forms/stretch.png" style="max-width: 120%; max-height: 120%;"/>
&lt;/div>
&lt;blockquote class="aside">I quickly made these in &lt;a href="https://www.tldraw.com/">tldraw&lt;/a> cause you really gotta be thinking in pictures to follow this and it&amp;rsquo;s just good manners to show the pictures. However I haven&amp;rsquo;t actually checked these are valid transforms. Sometimes even in a graphing calculator you&amp;rsquo;ll see what looks like an intersection and plug in the numbers and find it&amp;rsquo;s a near miss. So. No rigour here. Also I think the axis &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>a&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">a&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">a&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>b&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">b&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;/span>&lt;/span>&lt;/span> here should be sqrtd. Too late now.&lt;/blockquote>
&lt;p>What about an ellipse that isn&amp;rsquo;t aligned to the axis? Rotating the circle does nothing and rotating the lattice is the same as rotating the circle the other way. Instead, we have to shear the ellipse. What Gauss observed is that if we have &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mi>n&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>=&lt;/mo>&lt;mi>a&lt;/mi>&lt;msup>&lt;mi>x&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>+&lt;/mo>&lt;mi>b&lt;/mi>&lt;mi>x&lt;/mi>&lt;mi>y&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>c&lt;/mi>&lt;msup>&lt;mi>y&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">n^2 = ax^2 + bxy + cy^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8641079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> then we can interpret this as tilting our lattice so it now tiles the plane with parallelograms, rather than squares. The way to get the lattice sheared just right is to set the sides of each parallelogram to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msqrt>&lt;mi>a&lt;/mi>&lt;/msqrt>&lt;/mrow>&lt;annotation encoding="application/x-tex">\sqrt a&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.04em;vertical-align:-0.23972em;">&lt;/span>&lt;span class="mord sqrt">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8002800000000001em;">&lt;span class="svg-align" style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord mathdefault" style="padding-left:0.833em;">a&lt;/span>&lt;/span>&lt;span style="top:-2.76028em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="hide-tail" style="min-width:0.853em;height:1.08em;">&lt;svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'>&lt;path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/>&lt;/svg>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.23972em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msqrt>&lt;mi>c&lt;/mi>&lt;/msqrt>&lt;/mrow>&lt;annotation encoding="application/x-tex">\sqrt c&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.04em;vertical-align:-0.23972em;">&lt;/span>&lt;span class="mord sqrt">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8002800000000001em;">&lt;span class="svg-align" style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord mathdefault" style="padding-left:0.833em;">c&lt;/span>&lt;/span>&lt;span style="top:-2.76028em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="hide-tail" style="min-width:0.853em;height:1.08em;">&lt;svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'>&lt;path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/>&lt;/svg>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.23972em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> and the slope of the line to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mfrac>&lt;mi>b&lt;/mi>&lt;msqrt>&lt;mrow>&lt;mn>4&lt;/mn>&lt;mi>a&lt;/mi>&lt;mi>c&lt;/mi>&lt;/mrow>&lt;/msqrt>&lt;/mfrac>&lt;/mrow>&lt;annotation encoding="application/x-tex">\frac{b}{\sqrt{4ac}}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.4181079999999997em;vertical-align:-0.5379999999999999em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8801079999999999em;">&lt;span style="top:-2.5510085em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord sqrt mtight">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.912845em;">&lt;span class="svg-align" style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord mtight" style="padding-left:0.833em;">&lt;span class="mord mtight">4&lt;/span>&lt;span class="mord mathdefault mtight">a&lt;/span>&lt;span class="mord mathdefault mtight">c&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.872845em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;">&lt;svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'>&lt;path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/>&lt;/svg>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.12715500000000002em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.394em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">b&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.5379999999999999em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. (I got this from Klein and verified it in a graphing calculator. Beats me. Visually it makes sense but I&amp;rsquo;m out of time to spell it out).&lt;/p>
&lt;p>And once again: we can read out integer solutions to this equation by drawing a circle of radius &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span> around the origin, and counting the lattice points it goes through.&lt;/p>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/modular-forms/ellipse.png" style="max-width: 120%; max-height: 120%;"/>
&lt;/div>
&lt;p>The right hand side of that equation is a &lt;em>binary quadratic form&lt;/em> and number theorists talk about it as a function in its own right, &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>q&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>y&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;mi>a&lt;/mi>&lt;msup>&lt;mi>x&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>+&lt;/mo>&lt;mi>b&lt;/mi>&lt;mi>x&lt;/mi>&lt;mi>y&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>c&lt;/mi>&lt;msup>&lt;mi>y&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex"> q(x,y) = ax^2 + bxy + cy^2.&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">q&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8641079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>And now we&amp;rsquo;ve landed on a form, so modular forms are appearing over the horizon. What&amp;rsquo;s a form? What makes thing form? It&amp;rsquo;s something polynomial-like that obeys
&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>P&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>t&lt;/mi>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>t&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msup>&lt;mi>P&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">P(tx) = t^kP(x)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.13889em;">P&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.149108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8991079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.13889em;">P&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
for some &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>k&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and, in 2 variables, and you can figure more variables out yourself, &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>P&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>t&lt;/mi>&lt;mi>x&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>t&lt;/mi>&lt;mi>y&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>t&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msup>&lt;mi>P&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>y&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">P(tx, ty) = t^kP(x, y).&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.13889em;">P&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.149108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8991079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.13889em;">P&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>You see that? Linear scaling in the input becomes power scaling in the output. You can see this immediately for &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>P&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>x&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">P(x)=x^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.13889em;">P&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>, where &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>P&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>t&lt;/mi>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>t&lt;/mi>&lt;mi>x&lt;/mi>&lt;msup>&lt;mo stretchy="false">)&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>t&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;msup>&lt;mi>x&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>t&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mi>P&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">P(tx) = (tx)^2 = t^2x^2 = t^2P(x)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.13889em;">P&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.064108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">&lt;span class="mclose">)&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.064108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.13889em;">P&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>. So &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mi>x&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">x^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> is a form. When we have two variables as in &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>q&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>y&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">q(x,y)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">q&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>, then the exponents in each term need to sum to the same number, which gives you the &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>k&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>. In &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>q&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>y&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">q(x,y)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">q&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> it&amp;rsquo;s &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>2&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>. That makes it quadratic. And it&amp;rsquo;s binary because we stop at &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>y&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">y&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;/span>&lt;/span>&lt;/span> and don&amp;rsquo;t have a &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>z&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">z&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;/span>&lt;/span>&lt;/span>.&lt;/p>
&lt;p>You can imagine why this property might be interesting to people. Distance travelled at constant acceleration or whatever.&lt;/p>
&lt;p>Anyway, whatever modular forms are, we now know they are a kind of function, and we expect to see that relationship between its inputs and outputs pop up.&lt;/p>
&lt;p>To get to modularity we now want to look more at the lattice and other things we can do to it. The key observation is this: if we have a transformation that sends every lattice point to another lattice point on the original lattice, then with it we can generate more solutions to questions like those above, analogous to extending out the line through the origin we saw with the circle. Since we&amp;rsquo;re interested in integer solutions we&amp;rsquo;ll want transformations we can express with integers. The easiest to find are rotating the lattice by right angles, which give transformations like
&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mrow>&lt;mo fence="true">[&lt;/mo>&lt;mtable rowspacing="0.15999999999999992em" columnspacing="1em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mn>0&lt;/mn>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mrow>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mn>1&lt;/mn>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mn>0&lt;/mn>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;mo fence="true">]&lt;/mo>&lt;/mrow>&lt;mrow>&lt;mo fence="true">[&lt;/mo>&lt;mtable rowspacing="0.15999999999999992em" columnspacing="1em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>x&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>y&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;mo fence="true">]&lt;/mo>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;mrow>&lt;mo fence="true">[&lt;/mo>&lt;mtable rowspacing="0.15999999999999992em" columnspacing="1em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mrow>&lt;mo>−&lt;/mo>&lt;mi>y&lt;/mi>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>x&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;mo fence="true">]&lt;/mo>&lt;/mrow>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\begin{bmatrix}0 &amp;amp; -1 \\1 &amp;amp; 0\end{bmatrix}\begin{bmatrix}x \\ y\end{bmatrix}=\begin{bmatrix}-y \\ x\end{bmatrix}.&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:2.40003em;vertical-align:-0.95003em;">&lt;/span>&lt;span class="minner">&lt;span class="mopen delimcenter" style="top:0em;">&lt;span class="delimsizing size3">[&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="arraycolsep" style="width:0.5em;">&lt;/span>&lt;span class="arraycolsep" style="width:0.5em;">&lt;/span>&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">−&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose delimcenter" style="top:0em;">&lt;span class="delimsizing size3">]&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="minner">&lt;span class="mopen delimcenter" style="top:0em;">&lt;span class="delimsizing size3">[&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">x&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose delimcenter" style="top:0em;">&lt;span class="delimsizing size3">]&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:2.40003em;vertical-align:-0.95003em;">&lt;/span>&lt;span class="minner">&lt;span class="mopen delimcenter" style="top:0em;">&lt;span class="delimsizing size3">[&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">−&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">x&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose delimcenter" style="top:0em;">&lt;span class="delimsizing size3">]&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
Another one is to shift everything over one lattice point; the translation &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mrow>&lt;mo fence="true">[&lt;/mo>&lt;mtable rowspacing="0.15999999999999992em" columnspacing="1em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mn>1&lt;/mn>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mn>1&lt;/mn>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mn>0&lt;/mn>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mn>1&lt;/mn>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;mo fence="true">]&lt;/mo>&lt;/mrow>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\begin{bmatrix}1 &amp;amp; 1 \\ 0 &amp;amp; 1\end{bmatrix}.&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:2.40003em;vertical-align:-0.95003em;">&lt;/span>&lt;span class="minner">&lt;span class="mopen delimcenter" style="top:0em;">&lt;span class="delimsizing size3">[&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="arraycolsep" style="width:0.5em;">&lt;/span>&lt;span class="arraycolsep" style="width:0.5em;">&lt;/span>&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose delimcenter" style="top:0em;">&lt;span class="delimsizing size3">]&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>If you apply that one to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>q&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">q&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">q&lt;/span>&lt;/span>&lt;/span>&lt;/span> you&amp;rsquo;ll get &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mi>q&lt;/mi>&lt;mo mathvariant="normal" lspace="0em" rspace="0em">′&lt;/mo>&lt;/msup>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>y&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;mi>a&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>y&lt;/mi>&lt;msup>&lt;mo stretchy="false">)&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo>+&lt;/mo>&lt;mi>b&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>y&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mi>y&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>c&lt;/mi>&lt;msup>&lt;mi>y&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">q&amp;#x27;(x,y) = a(x+y)^2+b(x+y)y+cy^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.001892em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">q&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.751892em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">′&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.064108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mclose">&lt;span class="mclose">)&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.008548em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> and if you plot that sucker &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>n&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">= n^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.36687em;vertical-align:0em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> you&amp;rsquo;ll find it gives a new ellipse that intersects &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>q&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">q&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">q&lt;/span>&lt;/span>&lt;/span>&lt;/span> where &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>q&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">q&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">q&lt;/span>&lt;/span>&lt;/span>&lt;/span> goes through a lattice point, i.e. is an integer solution to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mi>q&lt;/mi>&lt;mo mathvariant="normal" lspace="0em" rspace="0em">′&lt;/mo>&lt;/msup>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>y&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>n&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">q&amp;#x27;(x,y) = n^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.001892em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">q&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.751892em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">′&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. And if you expand out the terms you&amp;rsquo;ll find yourself back on a binary quadratic form.&lt;/p>
&lt;p>You can apply these over and over with each other to get more elaborate transformations that stretch out the parallelograms. The thing they all have in common is they have determinant 1. We recall from 3blue1brown that the determinant is how a matrix will scale the area of the parallelogram, so what these matrices are doing is &lt;em>preserving&lt;/em> the area of each cell in the lattice. So we have two ways of seeing why these matrices and their compositions will let lattice points line up 1-to-1 before and after: firstly because we&amp;rsquo;ve built them out of simple individual steps that always do this (and it turns out any such integer &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>det&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">\det 1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mop">det&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span> matrix can be built this way), and secondly because we know the area never changes, so the density of the lattice is always the same.&lt;/p>
&lt;p>Mathematicians call these&amp;ndash;2x2 integer matrices with determinant 1&amp;ndash;unimodular. I have no idea why. Since you can multiply them together with abandon and always get back a unimodular matrix, &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>det&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mi>A&lt;/mi>&lt;mi>B&lt;/mi>&lt;mo>=&lt;/mo>&lt;mi>det&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mi>A&lt;/mi>&lt;mo>⋅&lt;/mo>&lt;mi>det&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mi>B&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\det AB = \det A \cdot \det B&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mop">det&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">A&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.05017em;">B&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mop">det&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">A&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mop">det&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.05017em;">B&lt;/span>&lt;/span>&lt;/span>&lt;/span>, that makes these things collectively a group, the modular group.&lt;/p>
&lt;p>We&amp;rsquo;ve got modular. We&amp;rsquo;ve got forms. We can see what they each have to do with lattices and what lattices have to do with number theory. But still, they&amp;rsquo;re somewhat disconnected.&lt;/p>
&lt;p>To tie these things together we need complex numbers. We&amp;rsquo;ve been thinking about lattices on the plane this whole time, and now we think of each lattice point as &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>z&lt;/mi>&lt;mo>=&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>i&lt;/mi>&lt;mi>y&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">z = x + iy&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.66666em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.85396em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault">i&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;/span>&lt;/span>&lt;/span>. And as usual with complex numbers we can now think of the action of multiplying by &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>z&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">z&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;/span>&lt;/span>&lt;/span> as rotating and scaling the complex plane, so &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>z&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">z&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;/span>&lt;/span>&lt;/span> sends the lattice point &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">(1,0&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>) to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>y&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">(x, y&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;/span>&lt;/span>&lt;/span>).&lt;/p>
&lt;p>To line things up the same way mathematicians do, here&amp;rsquo;s another way to define a lattice. Take two complex numbers, &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> (this is the notation everyone uses), and so long as they do not lie on the same line, we can generate a lattice with &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>m&lt;/mi>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo>+&lt;/mo>&lt;mi>n&lt;/mi>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">m\omega_1 + n\omega_2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.73333em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord mathdefault">m&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>, for integer &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>m&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">m, n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault">m&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>, stepping out in steps of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> as &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>m&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">m&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">m&lt;/span>&lt;/span>&lt;/span>&lt;/span> increases and in steps of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> as &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span> increases.&lt;/p>
&lt;p>If you think about it a bit you can see a purely real &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> and a purely imaginary &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> will give you a square lattice. Non-orthogonal &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>ω&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;/span>&lt;/span>&lt;/span> will give parallelograms.&lt;/p>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/modular-forms/lattice.png" style="max-width: 120%; max-height: 120%;"/>
&lt;/div>
&lt;p>Now, in this context we&amp;rsquo;re interested in lattices with integer parts in &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>ω&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and there are a lot of symmetries in the plane we want to get rid of, so applying a trick similar to shrinking the lattice to turn questions about integers into questions about rational numbers, we divide out the scale and imaginary part of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and substitute &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo separator="true">,&lt;/mo>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_1, \omega_2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> for &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mi>τ&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mi mathvariant="normal">/&lt;/mi>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">1, \tau = 1, \omega_2 / \omega_1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.1132em;">τ&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">/&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. This is more like the lattices we&amp;rsquo;ve been talking about already to shear ellipses, where stepping out in &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>m&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">m&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">m&lt;/span>&lt;/span>&lt;/span>&lt;/span> will step along the &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>x&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">x&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;/span>&lt;/span>&lt;/span> axis. However, unlike before, we always step out in steps of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>, rather than &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msqrt>&lt;mi>a&lt;/mi>&lt;/msqrt>&lt;/mrow>&lt;annotation encoding="application/x-tex">\sqrt a&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.04em;vertical-align:-0.23972em;">&lt;/span>&lt;span class="mord sqrt">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8002800000000001em;">&lt;span class="svg-align" style="top:-3em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord mathdefault" style="padding-left:0.833em;">a&lt;/span>&lt;/span>&lt;span style="top:-2.76028em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="hide-tail" style="min-width:0.853em;height:1.08em;">&lt;svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'>&lt;path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/>&lt;/svg>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.23972em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. Compare that to the rational number variant of the sums of squares question we started on.&lt;/p>
&lt;p>Mathematicians loathe and fear the bottom half of the complex plane and so swap &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> freely to ensure &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>τ&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\tau&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.1132em;">τ&lt;/span>&lt;/span>&lt;/span>&lt;/span> lies on the positive half-plane.&lt;/p>
&lt;p>So, now we want to think about a normalized lattice that has points in &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>x&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">x&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;/span>&lt;/span>&lt;/span> axis in steps of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span> and into the upper half of the complex plane in steps of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>τ&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\tau&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.1132em;">τ&lt;/span>&lt;/span>&lt;/span>&lt;/span>. We get &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>τ&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\tau&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.1132em;">τ&lt;/span>&lt;/span>&lt;/span>&lt;/span> from our choice of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>.&lt;/p>
&lt;p>This next step I can&amp;rsquo;t justify all that well and found I didn&amp;rsquo;t understand properly when I came to write it. We have a point on the lattice, &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>z&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">z&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;/span>&lt;/span>&lt;/span>. We would like to multiply it by a unimodular matrix and get back another point on the lattice. But we can&amp;rsquo;t multiply a 2x2 matrix by a single &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>z&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">z&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;/span>&lt;/span>&lt;/span>. We need a second term. It turns out we need homogeneous coordinates&amp;ndash;you know, like from video games&amp;ndash;and tack a one next to it. Then we get&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mrow>&lt;mo fence="true">[&lt;/mo>&lt;mtable rowspacing="0.15999999999999992em" columnspacing="1em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>a&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>b&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>c&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>d&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;mo fence="true">]&lt;/mo>&lt;/mrow>&lt;mrow>&lt;mo fence="true">[&lt;/mo>&lt;mtable rowspacing="0.15999999999999992em" columnspacing="1em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>z&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mn>1&lt;/mn>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;mo fence="true">]&lt;/mo>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;mi>z&lt;/mi>&lt;mrow>&lt;mo fence="true">[&lt;/mo>&lt;mtable rowspacing="0.15999999999999992em" columnspacing="1em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>a&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>c&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;mo fence="true">]&lt;/mo>&lt;/mrow>&lt;mo>+&lt;/mo>&lt;mrow>&lt;mo fence="true">[&lt;/mo>&lt;mtable rowspacing="0.15999999999999992em" columnspacing="1em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>b&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mi>d&lt;/mi>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;mo fence="true">]&lt;/mo>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;mrow>&lt;mo fence="true">[&lt;/mo>&lt;mtable rowspacing="0.15999999999999992em" columnspacing="1em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mrow>&lt;mi>a&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>b&lt;/mi>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="false">&lt;mrow>&lt;mi>a&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>d&lt;/mi>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;mo fence="true">]&lt;/mo>&lt;/mrow>&lt;/mrow>&lt;annotation encoding="application/x-tex">\begin{bmatrix}a &amp;amp; b \\ c &amp;amp; d\end{bmatrix}\begin{bmatrix}z \\ 1\end{bmatrix}=
z\begin{bmatrix}a \\ c\end{bmatrix} + \begin{bmatrix}b \\ d\end{bmatrix}=\begin{bmatrix}az + b \\ az +d \end{bmatrix}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:2.40003em;vertical-align:-0.95003em;">&lt;/span>&lt;span class="minner">&lt;span class="mopen delimcenter" style="top:0em;">&lt;span class="delimsizing size3">[&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">c&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="arraycolsep" style="width:0.5em;">&lt;/span>&lt;span class="arraycolsep" style="width:0.5em;">&lt;/span>&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">b&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">d&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose delimcenter" style="top:0em;">&lt;span class="delimsizing size3">]&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="minner">&lt;span class="mopen delimcenter" style="top:0em;">&lt;span class="delimsizing size3">[&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose delimcenter" style="top:0em;">&lt;span class="delimsizing size3">]&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:2.40003em;vertical-align:-0.95003em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="minner">&lt;span class="mopen delimcenter" style="top:0em;">&lt;span class="delimsizing size3">[&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">c&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose delimcenter" style="top:0em;">&lt;span class="delimsizing size3">]&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:2.40003em;vertical-align:-0.95003em;">&lt;/span>&lt;span class="minner">&lt;span class="mopen delimcenter" style="top:0em;">&lt;span class="delimsizing size3">[&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">b&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">d&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose delimcenter" style="top:0em;">&lt;span class="delimsizing size3">]&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:2.40003em;vertical-align:-0.95003em;">&lt;/span>&lt;span class="minner">&lt;span class="mopen delimcenter" style="top:0em;">&lt;span class="delimsizing size3">[&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-c">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.45em;">&lt;span style="top:-3.61em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.4099999999999997em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.9500000000000004em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose delimcenter" style="top:0em;">&lt;span class="delimsizing size3">]&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
which gives us two new &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>ω&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\omega_2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03588em;">ω&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and we scale that sucker back down to normalise back to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>τ&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\tau&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.1132em;">τ&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and so we the action of these matrices is understood the same as projection matrices. Written directly, that&amp;rsquo;s &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mfrac>&lt;mrow>&lt;mi>a&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>b&lt;/mi>&lt;/mrow>&lt;mrow>&lt;mi>c&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>d&lt;/mi>&lt;/mrow>&lt;/mfrac>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\frac{az + b}{cz + d}.&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:2.14077em;vertical-align:-0.7693300000000001em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.37144em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.7693300000000001em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> This seems truthy to me, in the sense of collapsing together structure as in our line-through-the-origin case, but I can&amp;rsquo;t explain it fully on it you press me on it. Remember that here &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>a&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>b&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>c&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>d&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">a, b, c, d&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;/span>&lt;/span>&lt;/span> are all integers.&lt;/p>
&lt;p>&lt;em>Now&lt;/em> we come to modular forms proper. Before, forms were (implicitly) purely real, but now we see we&amp;rsquo;re knee deep in complex numbers. We had &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>P&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>t&lt;/mi>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>t&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msup>&lt;mi>P&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">P(tx) = t^kP(x).&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.13889em;">P&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.149108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8991079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.13889em;">P&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>These are forms with respect to linear scaling. What we want are forms with respect to the modular group. This means we&amp;rsquo;re going to have some function on the complex plane, and it&amp;rsquo;s inputs are going to be related to its outputs by some power scaling law, after those inputs have been acted on by the modular group.&lt;/p>
&lt;p>Let&amp;rsquo;s step back a bit. In this exposition, what we&amp;rsquo;re really interested in is the lattice. We want modular forms to tell us about the lattice; interest in modular forms in their own right comes later. The tack I&amp;rsquo;ve seen taken is to say what we&amp;rsquo;re really interested in are &lt;em>modular functions&lt;/em>, rather than &lt;em>forms&lt;/em>, &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>f&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mfrac>&lt;mrow>&lt;mi>a&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>b&lt;/mi>&lt;/mrow>&lt;mrow>&lt;mi>c&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>d&lt;/mi>&lt;/mrow>&lt;/mfrac>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;mi>f&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>z&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo separator="true">,&lt;/mo>&lt;mtext>  &lt;/mtext>&lt;mi>det&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mo stretchy="false">[&lt;/mo>&lt;mi>a&lt;/mi>&lt;mtext> &lt;/mtext>&lt;mi>b&lt;/mi>&lt;mo separator="true">;&lt;/mo>&lt;mi>c&lt;/mi>&lt;mtext> &lt;/mtext>&lt;mi>d&lt;/mi>&lt;mo stretchy="false">]&lt;/mo>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">f(\frac{az + b}{cz + d})= f(z),\ \ \det([a\ b; c\ d])= 1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:2.14077em;vertical-align:-0.7693300000000001em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10764em;">f&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.37144em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.7693300000000001em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10764em;">f&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mspace"> &lt;/span>&lt;span class="mspace"> &lt;/span>&lt;span class="mop">det&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mspace"> &lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;span class="mpunct">;&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mspace"> &lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;span class="mclose">]&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> which act more or less exactly like our lattice in that it doesn&amp;rsquo;t change after being acted on by unimodular matrices, but now for all &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>z&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">z&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;/span>&lt;/span>&lt;/span> in the complex plane. Upper half-plane. Whatever. The hope is that such functions can encode number-theoretic information we care about, the same way &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>q&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>y&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>n&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">q(x,y)=n^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">q&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">y&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> reveals an ellipse.&lt;/p>
&lt;p>They then relax this requirement, saying such functions are too hard to find or maybe uninteresting, and require instead &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>f&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mfrac>&lt;mrow>&lt;mi>a&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>b&lt;/mi>&lt;/mrow>&lt;mrow>&lt;mi>c&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>d&lt;/mi>&lt;/mrow>&lt;/mfrac>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>c&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>d&lt;/mi>&lt;msup>&lt;mo stretchy="false">)&lt;/mo>&lt;mi>k&lt;/mi>&lt;/msup>&lt;mi>f&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>z&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">f(\frac{az+b}{cz+d})=(cz+d)^k f(z).&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:2.14077em;vertical-align:-0.7693300000000001em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10764em;">f&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.37144em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.7693300000000001em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.149108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;span class="mclose">&lt;span class="mclose">)&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8991079999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10764em;">f&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
That&amp;rsquo;s our modular form. So&amp;hellip; why this? Where&amp;rsquo;d &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>a&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>b&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">az+b&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.66666em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">b&lt;/span>&lt;/span>&lt;/span>&lt;/span> go? And how to interpret &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>k&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>? The way I interpret this is projective geometry-wise, so if you know homogenous coordinates you&amp;rsquo;ll be used to being able to pile up a bunch of transforms then divide out &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>w&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">w&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.02691em;">w&lt;/span>&lt;/span>&lt;/span>&lt;/span> at the end to land back on a plane. That &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>c&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>d&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">(cz + d)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> is saying under a unimodular transformation, &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>z&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">z&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;/span>&lt;/span>&lt;/span> needs to be sent &lt;em>somewhere&lt;/em> on the lattice? (I think!) of points scaling by &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>c&lt;/mi>&lt;mi>z&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>d&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">cz+d&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.66666em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord mathdefault">c&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;/span>&lt;/span>&lt;/span> is able to identify, projectively, as the same point. But, this is pretty handwavey and I think I can only get this idea across to people who already know projection matrices and homogeneous coordinates and all that, and I don&amp;rsquo;t really have an good intuition for how its working here as opposed to in Euclidian 3D.&lt;/p>
&lt;p>Naturally, mathematicians are even more restrictive about what kind of function &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>f&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">f&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10764em;">f&lt;/span>&lt;/span>&lt;/span>&lt;/span> can be, which I won&amp;rsquo;t bother with.&lt;/p>
&lt;p>Here&amp;rsquo;s the punchline. We don&amp;rsquo;t have any such &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>f&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">f&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10764em;">f&lt;/span>&lt;/span>&lt;/span>&lt;/span> yet and this post is not really going to go into them. My goal has been to get at why if you find such an &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>f&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">f&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10764em;">f&lt;/span>&lt;/span>&lt;/span>&lt;/span>, number theory tends to drop out of it, without definition overload. I&amp;rsquo;ll go over two kinds quickly.&lt;/p>
&lt;p>The first is the historical first, the lemniscate elliptic functions. They arose when Euler was investigating the physics of&amp;hellip; &lt;a href="https://www.jstor.org/stable/41133708">elastic ribbons&lt;/a>. They were particularly interested in this &lt;a href="https://www.desmos.com/calculator/d4nfqoor32">figure 8 curve&lt;/a>, called a &lt;a href="https://en.wikipedia.org/wiki/Lemniscate">lemniscate&lt;/a> (Latin for ribbon, naturally), which Gauss figured out a &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>sin&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\sin&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.66786em;vertical-align:0em;">&lt;/span>&lt;span class="mop">sin&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>cos&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\cos&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mop">cos&lt;/span>&lt;/span>&lt;/span>&lt;/span> analogue to, and these turn out to be &amp;lsquo;doubly periodic&amp;rsquo; when extended to complex numbers in the same way as these lattices.&lt;/p>
&lt;p>The second is a much more direct construction that I think was come up with to nail this case, the &lt;a href="https://en.wikipedia.org/wiki/Weierstrass_elliptic_function">Weierstrass elliptic functions&lt;/a>. Conceptually, you just drop a divide by zero on every lattice point. This makes the lattice &amp;lsquo;puncture&amp;rsquo; the complex plane which I find weirdly satisfying. You&amp;rsquo;d like to be able to just do&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>f&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>z&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;munder>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>m&lt;/mi>&lt;mo separator="true">,&lt;/mo>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;/munder>&lt;mfrac>&lt;mn>1&lt;/mn>&lt;mrow>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>z&lt;/mi>&lt;mo>−&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>m&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>n&lt;/mi>&lt;mi>τ&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;msup>&lt;mo stretchy="false">)&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;/mfrac>&lt;/mrow>&lt;annotation encoding="application/x-tex">
f(z) = \sum_{m,n} \frac{1}{(z - (m + n\tau))^2}
&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10764em;">f&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:2.707553em;vertical-align:-1.386113em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.0500050000000003em;">&lt;span style="top:-1.8999949999999999em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">m&lt;/span>&lt;span class="mpunct mtight">,&lt;/span>&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.050005em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.386113em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.32144em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">m&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.1132em;">τ&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mclose">&lt;span class="mclose">)&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.740108em;">&lt;span style="top:-2.9890000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.936em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>
and make it so that as &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>z&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">z&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;/span>&lt;/span>&lt;/span> nears a lattice point the &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>z&lt;/mi>&lt;mo>−&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>m&lt;/mi>&lt;mo>+&lt;/mo>&lt;mi>n&lt;/mi>&lt;mi>τ&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">z-(m + n\tau)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.66666em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.04398em;">z&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">m&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.1132em;">τ&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> term for that point goes to zero, but this turns out not to converge. Fixing it is a nice trick and then showing it&amp;rsquo;s a modular form is also simple if you are comfortable whippin' sums. For an explanation of this I really recommend the Stein and Sharkachi book, it&amp;rsquo;s good and will occasionally repeat information that needs repeating, a rare skill among mathematicians.&lt;/p>
&lt;p>Putting these to work in real theorems and such is also another matter entirely. So this post hasn&amp;rsquo;t captured the character and feel of how modular forms are used at all. If you do have any skill in that, and you try to define modular forms, you start in weird places, and start talking about q-series (not the &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>q&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">q&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">q&lt;/span>&lt;/span>&lt;/span>&lt;/span> above), and rational points on elliptic curves, and Fourier expansions of partition functions, and&lt;/p></description></item><item><title>Some low discrepancy noise functions</title><link>https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/</link><pubDate>Wed, 10 Aug 2022 00:00:00 +0000</pubDate><guid>https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/</guid><description>&lt;p>This post is about an attempt to generate blue noise at a point: no state, no offline training, just arithmetic on an index. Honestly I don&amp;rsquo;t have a good reason for wanting this but it&amp;rsquo;s probably been at the back of my mind for like 2 years&amp;ndash;it just seemed like it ought to be possible. It turns out to be doable in 1D and with a little lookup table we can push it to 2D.&lt;/p>
&lt;p>The kind of blue noise we&amp;rsquo;re going to get is the classic &amp;ldquo;&lt;a href="https://en.wikipedia.org/wiki/Blue_noise#Blue_noise">3dB per octave&lt;/a>&amp;quot;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> blue noise, which might turn out to be not all that useful, who knows. But it will also be low discrepancy, and the tricks in this post to keep it that way all the way to 2D are pretty cool I think. The plan is to take a sequence we already know has good discrepancy, whiten its frequency spectrum, and then turn that into blue noise.&lt;/p>
&lt;h2 id="motivating-example-dither">Motivating example: dither&lt;/h2>
&lt;p>So: low discrepancy blue noise. Breaking that down:&lt;/p>
&lt;ul>
&lt;li>Low discrepancy: values the noise takes on are evenly spread out. Read on a bit if this is unclear.&lt;/li>
&lt;li>Blue: no or little low frequencies in the noise&amp;rsquo;s frequency spectrum.&lt;/li>
&lt;li>Noise: unpredictable.&lt;/li>
&lt;/ul>
&lt;p>A problem I had writing this post is that it&amp;rsquo;s not obvious why you&amp;rsquo;d even want noise with these properties, and the technical answer&amp;ndash;reduce variance&amp;ndash;is a bit mystifying. This was a good excuse for me to look at dithering a bit more closely. &lt;a href="https://bartwronski.com/2016/10/30/dithering-in-games-mini-series/">Bart Wronski&lt;/a> has a nice series of posts on dither if it&amp;rsquo;s new to you, but hopefully you can follow this either way.&lt;/p>
&lt;p>Here, we want to represent a 64x64 gray square, with a gray value of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>0.5&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">0.5&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">5&lt;/span>&lt;/span>&lt;/span>&lt;/span>, using only black and white pixels. If we know ahead of time that it is solid gray, we could use a checkerboard pattern as a way to approximate &amp;ldquo;gray&amp;rdquo;. But suppose we don&amp;rsquo;t, and we decide to choose whether to make a pixel black or white by drawing a random value in &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">[0,1)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> and comparing it to the source pixel; if the random value is less, black, if it&amp;rsquo;s greater, white. Since we&amp;rsquo;re using random values, we can do this multiple times and get a different dither pattern every time. Using some functions I&amp;rsquo;ll get into below, we get this.&lt;/p>
&lt;div class="img-flex" style="justify-content: space-around; width: 648px; left: unset; margin: unset;">
&lt;div style="flex: 0 1 0%;">PRNG&lt;/div>
&lt;div style="flex: 0 1 0%; white-space: nowrap;">Low discrepancy&lt;/div>
&lt;div style="flex: 0 1 0%;">Blue&lt;/div>
&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/dither-grid.png" width="648" height="870" loading="lazy" />
&lt;/div>
&lt;p>The PRNG is quite bad. By bad I mean like, to my eye, the third square seems to have too many white pixels. So, yes, it will give 1:1 white and black pixels on average, but that&amp;rsquo;s averaged over all the dithering you could ever do. That&amp;rsquo;s the problem: we don&amp;rsquo;t care about the quality of unrealized dither.&lt;/p>
&lt;p>The middle column, maybe you can convince yourself it looks different, I dunno. It&amp;rsquo;s subtle. If you take it upon yourself to count number of white pixels you&amp;rsquo;ll find that very close to half of them are white, in all four squares. That&amp;rsquo;s low discrepancy. The noise values we got covered &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">[0,1)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> much more evenly than random noise. This gives us frequencies of black and white pixels that are always close to the frequencies of the dither we know would be ideal for solid gray.&lt;/p>
&lt;p>However, that&amp;rsquo;s not true over the entire square; there are clumps of black pixels and clumps of white pixels. That&amp;rsquo;s what blue noise addresses. Which you can see just looking at it, right. This gives &lt;em>spatial&lt;/em> frequencies of black and white pixels that better match the ideal dither.&lt;/p>
&lt;p>That&amp;rsquo;s two different kinds of frequency&amp;ndash;one in the histogram sense and another in the spectrum sense. I don&amp;rsquo;t quite know how independent they are. On the one hand, once you have some noise values, you can just rearrange them to get different frequency spectrums with the same discrepancy. On the other, if you want the noise to be low discrepancy &amp;lsquo;everywhere&amp;rsquo;, without any rearrangement, that rules out long lasting low frequency content. What you&amp;rsquo;ll find is the more samples you are willing to wait around for until a given run of draws becomes low discrepancy, the more freedom in shaping the spectrum you&amp;rsquo;ll have. Noise that is low discrepancy everywhere and at all scales has to be blue, though, I think.&lt;/p>
&lt;p>Back to the 64x64 squares. Generating a thousand each, the standard deviation of the number of white pixels in a random PRNG square is 32 (!). It&amp;rsquo;s less than 1 for both the low discrepancy versions. Counting just the top left quarter, at 32x32, it becomes 16, 12, and 2, for the PRNG, white and blue noise respectively. That&amp;rsquo;s what reducing variance means.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>The API that I want is a counter hash, so a function that takes in an index, hashes it, and spits out a noise value at that index. No state carries forward from index to index, every value is computed independently. Like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">// integer index to 0.32 fixed point
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#a6e22e">noise&lt;/span>(&lt;span style="color:#66d9ef">uint32_t&lt;/span> index);
&lt;span style="color:#75715e">// usage
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">uint32_t&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">512&lt;/span>; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#75715e">// convert the noise to a float in [0, 1)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">float&lt;/span>)noise(i) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">32f&lt;/span>;
&lt;span style="color:#75715e">// ... do something with x
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;re going to follow &lt;a href="https://jcgt.org/published/0009/04/01/">Practical Hash-based Owen Scrambling&lt;/a> by taking a sequence we already know is low discrepancy and shuffling it. We&amp;rsquo;ll need the &lt;em>nested uniform scramble&lt;/em> from that paper, too. As for the sequence, the golden ratio sequence is &lt;a href="https://marc-b-reynolds.github.io/distribution/2020/01/24/Rank1Pre.html">very easy to compute&lt;/a> in the form I want, so we&amp;rsquo;ll use that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> np
i32 &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>int32
u32 &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>uint32
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">golden_ratio_sequence&lt;/span>(i: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
&lt;span style="color:#66d9ef">return&lt;/span> u32(i) &lt;span style="color:#f92672">*&lt;/span> u32(&lt;span style="color:#ae81ff">2654435769&lt;/span>) &lt;span style="color:#75715e"># 0.618... in 0.32 fixed point&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">reverse_bits32&lt;/span>(x: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
x &lt;span style="color:#f92672">=&lt;/span> u32(x)
x &lt;span style="color:#f92672">=&lt;/span> ((x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">1&lt;/span>)) &lt;span style="color:#f92672">&amp;amp;&lt;/span> u32(&lt;span style="color:#ae81ff">0x55555555&lt;/span>)) &lt;span style="color:#f92672">|&lt;/span> ((x &lt;span style="color:#f92672">&amp;amp;&lt;/span> u32(&lt;span style="color:#ae81ff">0x55555555&lt;/span>)) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">1&lt;/span>))
x &lt;span style="color:#f92672">=&lt;/span> ((x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">2&lt;/span>)) &lt;span style="color:#f92672">&amp;amp;&lt;/span> u32(&lt;span style="color:#ae81ff">0x33333333&lt;/span>)) &lt;span style="color:#f92672">|&lt;/span> ((x &lt;span style="color:#f92672">&amp;amp;&lt;/span> u32(&lt;span style="color:#ae81ff">0x33333333&lt;/span>)) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">2&lt;/span>))
x &lt;span style="color:#f92672">=&lt;/span> ((x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">4&lt;/span>)) &lt;span style="color:#f92672">&amp;amp;&lt;/span> u32(&lt;span style="color:#ae81ff">0x0F0F0F0F&lt;/span>)) &lt;span style="color:#f92672">|&lt;/span> ((x &lt;span style="color:#f92672">&amp;amp;&lt;/span> u32(&lt;span style="color:#ae81ff">0x0F0F0F0F&lt;/span>)) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">4&lt;/span>))
x &lt;span style="color:#f92672">=&lt;/span> ((x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">8&lt;/span>)) &lt;span style="color:#f92672">&amp;amp;&lt;/span> u32(&lt;span style="color:#ae81ff">0x00FF00FF&lt;/span>)) &lt;span style="color:#f92672">|&lt;/span> ((x &lt;span style="color:#f92672">&amp;amp;&lt;/span> u32(&lt;span style="color:#ae81ff">0x00FF00FF&lt;/span>)) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">8&lt;/span>))
x &lt;span style="color:#f92672">=&lt;/span> ( x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">16&lt;/span>) ) &lt;span style="color:#f92672">|&lt;/span> ( x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">16&lt;/span>))
&lt;span style="color:#66d9ef">return&lt;/span> x
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">nested_uniform_scramble&lt;/span>(x: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
x &lt;span style="color:#f92672">=&lt;/span> reverse_bits32(x)
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> u32(&lt;span style="color:#ae81ff">0x6c50b47c&lt;/span>)
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> u32(&lt;span style="color:#ae81ff">0xb82f1e52&lt;/span>)
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> u32(&lt;span style="color:#ae81ff">0xc7afe638&lt;/span>)
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> u32(&lt;span style="color:#ae81ff">0x8d22f6e6&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> reverse_bits32(x)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">okay_blue_noise&lt;/span>(i: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
&lt;span style="color:#66d9ef">return&lt;/span> golden_ratio_sequence(nested_uniform_scramble(i))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can get a reordering of any sequence you like by hashing the index with &lt;em>nested uniforms scramble&lt;/em>.&lt;/p>
&lt;p>It&amp;rsquo;s a bit intimidating, but the important thing about it is each hex constant there is an even number. In binary, multiplying by an even number sends bits to the left, so each xor permutes bits in a low-to-high direction. The authors wanted to permute bits high-to-low, and so reverse the bit order before and after. So, it&amp;rsquo;s a hash, where the action of each bit on the hash is constrained to only permute bits below itself. And the &lt;a href="http://burtleburtle.net/bob/rand/talksmall.html">xors are invertible&lt;/a>, meaning each input maps to a unique output.&lt;/p>
&lt;p>A consequence of this that can give you some intuition for what it does is that the high bit of the input is always preserved. So, as a counter hash, the first &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mi>n&lt;/mi>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.664392em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.664392em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> inputs map to &lt;code>u32&lt;/code>s below &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mi>n&lt;/mi>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.664392em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.664392em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. And since you know that holds for &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mrow>&lt;mi>n&lt;/mi>&lt;mo>+&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{n+1}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;span class="mbin mtight">+&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> as well, you also get that &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;msup>&lt;mn>2&lt;/mn>&lt;mi>n&lt;/mi>&lt;/msup>&lt;mo separator="true">,&lt;/mo>&lt;msup>&lt;mn>2&lt;/mn>&lt;mrow>&lt;mi>n&lt;/mi>&lt;mo>+&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msup>&lt;mo stretchy="false">]&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">[2^n, 2^{n+1}]&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.064108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.664392em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;span class="mbin mtight">+&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">]&lt;/span>&lt;/span>&lt;/span>&lt;/span> maps to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;msup>&lt;mn>2&lt;/mn>&lt;mi>n&lt;/mi>&lt;/msup>&lt;mo separator="true">,&lt;/mo>&lt;msup>&lt;mn>2&lt;/mn>&lt;mrow>&lt;mi>n&lt;/mi>&lt;mo>+&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msup>&lt;mo stretchy="false">]&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">[2^n, 2^{n+1}]&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.064108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.664392em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;span class="mbin mtight">+&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">]&lt;/span>&lt;/span>&lt;/span>&lt;/span>. In these intervals, the shuffled sequence produces the same values as the underlying sequence, just in a different order. This doesn&amp;rsquo;t fully explain its behaviour as a hash but it&amp;rsquo;s enough for us to get going with.&lt;/p>
&lt;p>By the way, you can also think of the (fixed point) golden ratio sequence as a shuffle of the integers in &lt;code>u32&lt;/code>. They all appear exactly once.&lt;/p>
&lt;p>This has all been background, but before we get to the good stuff, let&amp;rsquo;s look at what we have:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
plt&lt;span style="color:#f92672">.&lt;/span>rcParams[&lt;span style="color:#e6db74">&amp;#39;figure.figsize&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">9&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">spectrum&lt;/span>(seq):
S &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>fft&lt;span style="color:#f92672">.&lt;/span>rfft(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> seq &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>abs(S) &lt;span style="color:#f92672">/&lt;/span> len(seq)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">plots&lt;/span>(name: str, seq_u32):
seq &lt;span style="color:#f92672">=&lt;/span> seq_u32 &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>ldexp(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>)
figure, (histogram_axis, spectrum_axis) &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>subplots(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)
histogram_axis&lt;span style="color:#f92672">.&lt;/span>hist(seq, &lt;span style="color:#ae81ff">128&lt;/span>)
histogram_axis&lt;span style="color:#f92672">.&lt;/span>set_xlabel(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> histogram: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(seq)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> points&amp;#34;&lt;/span>)
dft &lt;span style="color:#f92672">=&lt;/span> spectrum(seq)
spectrum_axis&lt;span style="color:#f92672">.&lt;/span>plot(dft)
spectrum_axis&lt;span style="color:#f92672">.&lt;/span>set_xlabel(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> spectrum: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(seq)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> points&amp;#34;&lt;/span>)
n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3333&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bad histogram&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">from&lt;/span> numpy.random &lt;span style="color:#f92672">import&lt;/span> default_rng
rng &lt;span style="color:#f92672">=&lt;/span> default_rng()
plots(&lt;span style="color:#e6db74">&amp;#34;PRNG&amp;#34;&lt;/span>, rng&lt;span style="color:#f92672">.&lt;/span>integers(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0x1_0000_0000&lt;/span>, size&lt;span style="color:#f92672">=&lt;/span>n))
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/PRNG.png" width="744" height="217" loading="lazy" />
&lt;/div>
&lt;p>Bad spectrum&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">i &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>arange(n)
plots(&lt;span style="color:#e6db74">&amp;#34;golden ratio sequence&amp;#34;&lt;/span>, golden_ratio_sequence(i))
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/golden-ratio-sequence.png" width="744" height="217" loading="lazy" />
&lt;/div>
&lt;p>Noise with a flat histogram?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">plots(&lt;span style="color:#e6db74">&amp;#34;nested uniform scramble-shuffled grs&amp;#34;&lt;/span>, okay_blue_noise(i))
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/nus-shuffled-grs.png" width="744" height="217" loading="lazy" />
&lt;/div>
&lt;p>This already has some low frequency attenuation. Well, if you drop the last bit reversal step and the golden ratio sequence and instead use it directly, not as a shuffle, it comes out even better. But my plan here is to clear the way by getting to white noise, and to use that as a base for more noise colours, so forget I said anything.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="xorshift">Xorshift&lt;/h2>
&lt;p>We need more unpredictability. To that end, let&amp;rsquo;s look at using xorshift as a counter hash. Specifically, lets look at the low bits.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">xorshift&lt;/span>(x: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
x &lt;span style="color:#f92672">=&lt;/span> u32(x)
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">13&lt;/span>)
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">17&lt;/span>)
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">5&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> x
i &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>arange(&lt;span style="color:#ae81ff">16&lt;/span>)
print(i)
print(xorshift(i) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0b1111&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">[ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
[ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
&lt;/code>&lt;/pre>&lt;p>Uh, hold on,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">xorshift(i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">64&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0b1111&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">[ 5 4 7 6 1 0 3 2 13 12 15 14 9 8 11 10]
&lt;/code>&lt;/pre>&lt;p>The lower 4 bits are a (not very random) permutation of the original 4-bit sequence!! The Xorshift* variants preserve this property and is at least superficially random-looking so let&amp;rsquo;s use that instead from now on (&lt;a href="https://gist.github.com/imneme/9b769cefccac1f2bd728596da3a856dd">constant from Melissa O&amp;rsquo;Neill&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">xorshift_star&lt;/span>(x: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
x &lt;span style="color:#f92672">=&lt;/span> u32(x)
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">13&lt;/span>)
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">17&lt;/span>)
x &lt;span style="color:#f92672">^=&lt;/span> x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">5&lt;/span>)
x &lt;span style="color:#f92672">*=&lt;/span> u32(&lt;span style="color:#ae81ff">0x9e02ad0d&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> x
xorshift_star(i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">64&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0b1111&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">[ 1 4 11 14 13 0 7 10 9 12 3 6 5 8 15 2]
&lt;/code>&lt;/pre>&lt;p>This works for powers of two up to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>16&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{16}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">1&lt;/span>&lt;span class="mord mtight">6&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. This isn&amp;rsquo;t a good way of generating permutations&amp;ndash;it can&amp;rsquo;t make all that many&amp;ndash;but we don&amp;rsquo;t need it to be good. &lt;a href="https://en.wikipedia.org/wiki/Linear_congruential_generator">LCGs&lt;/a> work this way, too.&lt;/p>
&lt;p>Now, because of this we can bestow xorshift with the high-bit-preserving property&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> of &lt;em>nested uniform scramble&lt;/em> by fixing the high bit and masking off any new bits placed above it. And we know that when we do this, every input still maps to a unique output, so long as we only scramble the lower 2 bytes. Using all 16 bits is way too random, so we can cap the number of bits we allow to be scrambled this way, and use the rest as a seed that selects a permutation. Looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">all_ones_below_high_bit&lt;/span>(x: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
x &lt;span style="color:#f92672">=&lt;/span> u32(x)
x &lt;span style="color:#f92672">|=&lt;/span> (x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">16&lt;/span>))
x &lt;span style="color:#f92672">|=&lt;/span> (x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">8&lt;/span>))
x &lt;span style="color:#f92672">|=&lt;/span> (x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">4&lt;/span>))
x &lt;span style="color:#f92672">|=&lt;/span> (x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">2&lt;/span>))
x &lt;span style="color:#f92672">|=&lt;/span> (x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">1&lt;/span>))
&lt;span style="color:#75715e"># this last shift: the high bit is not included&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">unfolded_masked_xorshift&lt;/span>(x: u32, cap_mask: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
mask &lt;span style="color:#f92672">=&lt;/span> all_ones_below_high_bit(x &lt;span style="color:#f92672">&amp;amp;&lt;/span> cap_mask)
upper &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#f92672">~&lt;/span>mask
lower &lt;span style="color:#f92672">=&lt;/span> xorshift_star(x) &lt;span style="color:#f92672">&amp;amp;&lt;/span> mask
result &lt;span style="color:#f92672">=&lt;/span> upper &lt;span style="color:#f92672">+&lt;/span> lower
&lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every bit we include in this scramble increases discrepancy&amp;ndash;bits can permute bits to their left, here. We can claw back a bit by treating the high bit of &lt;code>cap_mask&lt;/code> as a kind of sign bit and flipping all this logic to work backwards when its set.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">masked_xorshift&lt;/span>(x: u32, bits: u32 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
&lt;span style="color:#75715e"># all ones if (x &amp;amp; 0x100) == 0x100, all zeros otherwise&lt;/span>
sign_mask &lt;span style="color:#f92672">=&lt;/span> i32(x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">31&lt;/span> &lt;span style="color:#f92672">-&lt;/span> bits)) &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> i32(&lt;span style="color:#ae81ff">31&lt;/span>)
sign_mask &lt;span style="color:#f92672">=&lt;/span> u32(sign_mask)
cap_mask &lt;span style="color:#f92672">=&lt;/span> u32((&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> bits) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> unfolded_masked_xorshift(x &lt;span style="color:#f92672">^&lt;/span> sign_mask, cap_mask) &lt;span style="color:#f92672">^&lt;/span> sign_mask
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is all pretty abstract. You can see what it does by plotting the difference with its input:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">i &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>arange(&lt;span style="color:#ae81ff">1024&lt;/span>)
plt&lt;span style="color:#f92672">.&lt;/span>plot(i &lt;span style="color:#f92672">-&lt;/span> masked_xorshift(i))
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/xor-diff.png" width="900" height="200" loading="lazy" />
&lt;/div>
&lt;p>As a shuffle, this shows you where elements are being moved to, relative to their original position. With &lt;code>bits = 8&lt;/code>, that distance is never more than 128. So, while this scramble doesn&amp;rsquo;t have all the nice properties of &lt;em>nested uniform scramble&lt;/em>, we do get a version of the &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;msup>&lt;mn>2&lt;/mn>&lt;mi>n&lt;/mi>&lt;/msup>&lt;mo separator="true">,&lt;/mo>&lt;msup>&lt;mn>2&lt;/mn>&lt;mrow>&lt;mi>n&lt;/mi>&lt;mo>+&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msup>&lt;mo stretchy="false">]&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">[2^n, 2^{n+1}]&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.064108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.664392em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;span class="mbin mtight">+&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">]&lt;/span>&lt;/span>&lt;/span>&lt;/span> bijection property that repeats inside every chunk of size 256. So discrepancy-wise it&amp;rsquo;s kind of bad, but we can bound the bad with &lt;code>bits&lt;/code>.&lt;/p>
&lt;p>Now we&amp;rsquo;ve got low discrepancy white noise:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">white_shuffle&lt;/span>(i: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
s &lt;span style="color:#f92672">=&lt;/span> i
s &lt;span style="color:#f92672">=&lt;/span> masked_xorshift(s)
s &lt;span style="color:#f92672">=&lt;/span> nested_uniform_scramble(s)
&lt;span style="color:#66d9ef">return&lt;/span> s
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">white&lt;/span>(i: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
&lt;span style="color:#66d9ef">return&lt;/span> golden_ratio_sequence(white_shuffle(i))
i &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>arange(&lt;span style="color:#ae81ff">3333&lt;/span>)
plots(&lt;span style="color:#e6db74">&amp;#34;white&amp;#34;&lt;/span>, white(i))
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/white.png" width="744" height="217" loading="lazy" />
&lt;/div>
&lt;p>Look closely at the lowest frequencies of the spectrum. There is a slight gradient away from zero. This is what &lt;code>bits&lt;/code> controls: the slope of that gradient. I found that at 11 bits it&amp;rsquo;s qualitatively pure white noise with no obvious correlations (&amp;hellip; aside from an usually flat histogram). But it&amp;rsquo;s just too much random. For example, the variance in the dither example really suffers. And variance is what we care about.&lt;/p>
&lt;p>Next: gotta eyeball it in 2D. You gotta.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">plt&lt;span style="color:#f92672">.&lt;/span>rcParams[&lt;span style="color:#e6db74">&amp;#39;image.cmap&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;gray&amp;#39;&lt;/span>
plt&lt;span style="color:#f92672">.&lt;/span>rcParams[&lt;span style="color:#e6db74">&amp;#39;image.interpolation&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;none&amp;#39;&lt;/span>
px &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">/&lt;/span>plt&lt;span style="color:#f92672">.&lt;/span>rcParams[&lt;span style="color:#e6db74">&amp;#39;figure.dpi&amp;#39;&lt;/span>]
n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">512&lt;/span>
i &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>arange(n&lt;span style="color:#f92672">*&lt;/span>n)
f, ax &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>subplots(figsize&lt;span style="color:#f92672">=&lt;/span>(n&lt;span style="color:#f92672">*&lt;/span>px, n&lt;span style="color:#f92672">*&lt;/span>px)); ax&lt;span style="color:#f92672">.&lt;/span>axis(&lt;span style="color:#e6db74">&amp;#39;off&amp;#39;&lt;/span>)
ax&lt;span style="color:#f92672">.&lt;/span>imshow(white(i)&lt;span style="color:#f92672">.&lt;/span>reshape((n,n)) &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>ldexp(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/white2d-bad.png" width="512" height="512" loading="lazy" />
&lt;/div>
&lt;p>Ah. The edges. It&amp;rsquo;s bad. Okay, that&amp;rsquo;s our choice of &lt;code>bits&lt;/code>. It&amp;rsquo;s too small. But we don&amp;rsquo;t have to increase &lt;code>bits&lt;/code>, we can get away with doing another nested uniform scramble. This is kind of painful on x64, where bit reversal spews instructions everywhere, but, eh. There&amp;rsquo;s a trade-off between performance and discrepancy here and I completely lack any insight on it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">white_shuffle&lt;/span>(i: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
s &lt;span style="color:#f92672">=&lt;/span> i
s &lt;span style="color:#f92672">=&lt;/span> nested_uniform_scramble(s)
s &lt;span style="color:#f92672">=&lt;/span> masked_xorshift(s)
s &lt;span style="color:#f92672">=&lt;/span> nested_uniform_scramble(s)
&lt;span style="color:#66d9ef">return&lt;/span> s
f, ax &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>subplots(figsize&lt;span style="color:#f92672">=&lt;/span>(n&lt;span style="color:#f92672">*&lt;/span>px, n&lt;span style="color:#f92672">*&lt;/span>px)); ax&lt;span style="color:#f92672">.&lt;/span>axis(&lt;span style="color:#e6db74">&amp;#39;off&amp;#39;&lt;/span>)
ax&lt;span style="color:#f92672">.&lt;/span>imshow(white(i)&lt;span style="color:#f92672">.&lt;/span>reshape((n,n)) &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>ldexp(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/white2d.png" width="512" height="512" loading="lazy" />
&lt;/div>
&lt;p>👍&lt;/p>
&lt;h2 id="blue-noise">Blue noise&lt;/h2>
&lt;p>Now, to transmute this into blue noise. Filtering the noise directly destroys low discrepancy, so no perfectly tuned cut off frequency and ripple here. But I think what I&amp;rsquo;m about to suggest might seem to come out of nowhere for some people. With that in mind, here&amp;rsquo;s what I was thinking about when I realised this: the &lt;em>unshuffled&lt;/em> golden ratio sequence has the property that&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">golden_ratio_sequence(i &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&lt;/span> golden_ratio_sequence(i)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In other words, you can go backwards from zero, and it&amp;rsquo;s the same, just inverted around &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>0.5&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">0.5&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">5&lt;/span>&lt;/span>&lt;/span>&lt;/span>. So what if we interleaved the forwards sequence with the backwards sequence? The two sequences would meet in the middle. Seems natural, right?&lt;/p>
&lt;p>This turns out to do something very specific in the frequency domain: it fills in the new frequency bins&amp;ndash;twice as many samples, twice as many bins&amp;ndash;with a copy of the frequency spectrum then high pass filters the whole thing. This is entirely due to the right hand side of the above equation, so when we use that form, it also works on the &lt;em>shuffled&lt;/em> sequence.&lt;/p>
&lt;p>But why!? If you&amp;rsquo;re comfortable with DSP this can be hand-waved as being the composition of three steps: zero-stuffing to &lt;a href="https://bartwronski.com/2021/02/15/bilinear-down-upsampling-pixel-grids-and-that-half-pixel-offset/">repeat the frequency spectrum&lt;/a>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>, applying the simple low-pass filter &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo stretchy="false">]&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">[1, 1]&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mclose">]&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and then reversing the frequency spectrum by inverting every second sample. This turns the low-pass filter we just applied into a high-pass filter.&lt;/p>
&lt;p>Even so, that last bit might need more explaining if you haven&amp;rsquo;t seen it before. This is directed at DSP people (don&amp;rsquo;t worry about it). First, in this context, &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>1&lt;/mn>&lt;mo>−&lt;/mo>&lt;msub>&lt;mi>a&lt;/mi>&lt;mi>i&lt;/mi>&lt;/msub>&lt;mo>=&lt;/mo>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo>⋅&lt;/mo>&lt;msub>&lt;mi>a&lt;/mi>&lt;mi>i&lt;/mi>&lt;/msub>&lt;mo separator="true">,&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">1 - a_i=-1\cdot a_i,&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.72777em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.72777em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord">−&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">⋅&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.625em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> because in 0.32 fixed point, we have &lt;code>0x1_0000_0000 - a[i] = 0 - a[i]&lt;/code>. From this we get that inverting every second sample is equivalent to point-wise multiplication by the signal&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">[&lt;/mo>&lt;mi>n&lt;/mi>&lt;mo stretchy="false">]&lt;/mo>&lt;mo>=&lt;/mo>&lt;mi mathvariant="normal">.&lt;/mi>&lt;mi mathvariant="normal">.&lt;/mi>&lt;mi mathvariant="normal">.&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1...&lt;/mn>&lt;mo>=&lt;/mo>&lt;msup>&lt;mi>e&lt;/mi>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mi>π&lt;/mi>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex"> x[n] = ...-1,1,-1,1... = e^{i\pi n} &lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mclose">]&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.66666em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">−&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8746639999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">e&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8746639999999999em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mord mathdefault mtight" style="margin-right:0.03588em;">π&lt;/span>&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>which is your frequency shift in the time domain&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> operator set to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>π&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\pi&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">π&lt;/span>&lt;/span>&lt;/span>&lt;/span>, a half turn. This places all the negative frequencies into the positive part of spectrum, and because of the conjugate symmetry of real signal DFTs, they are the mirror image of the positive frequencies.&lt;/p>
&lt;p>DSP talk&amp;rsquo;s over. Intuitively, something like this &lt;em>should&lt;/em> happen&amp;ndash;low frequencies are slow movement, high frequencies are rapid movement. Forcing the sequence to repeatedly jump from one half to the other pushes all the frequencies higher.&lt;/p>
&lt;p>For &amp;lsquo;noise&amp;rsquo; this has the weird property that every second value is just the previous value flipped around &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>0.5&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">0.5&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">5&lt;/span>&lt;/span>&lt;/span>&lt;/span>. A gray code round can get rid of that&amp;ndash;rightward invertible action of the bits like before by the way, this is a scramble. Shift here is by 6 because reserving the high bits preserves the frequency spectrum. That&amp;rsquo;s where all the energy in the signal is.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">kronecker_sequence&lt;/span>(i: u32, a: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
&lt;span style="color:#66d9ef">return&lt;/span> u32(i) &lt;span style="color:#f92672">*&lt;/span> u32(a)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">blue&lt;/span>(i: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
s &lt;span style="color:#f92672">=&lt;/span> white_shuffle(i &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
b &lt;span style="color:#f92672">=&lt;/span> kronecker_sequence(s, &lt;span style="color:#ae81ff">2654435770&lt;/span>) &lt;span style="color:#75715e"># 0.31 fixed point golden ratio&lt;/span>
odd &lt;span style="color:#f92672">=&lt;/span> u32(i &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
b &lt;span style="color:#f92672">^=&lt;/span> (odd &lt;span style="color:#f92672">^&lt;/span> u32(&lt;span style="color:#ae81ff">1&lt;/span>)) &lt;span style="color:#f92672">-&lt;/span> u32(&lt;span style="color:#ae81ff">1&lt;/span>); &lt;span style="color:#75715e"># negate on odd indices&lt;/span>
b &lt;span style="color:#f92672">+=&lt;/span> odd
b &lt;span style="color:#f92672">^=&lt;/span> b &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">6&lt;/span>) &lt;span style="color:#75715e"># gray code round&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> b
i &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>arange(&lt;span style="color:#ae81ff">3333&lt;/span>)
plots(&lt;span style="color:#e6db74">&amp;#34;blue&amp;#34;&lt;/span>, blue(i))
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/blue.png" width="744" height="217" loading="lazy" />
&lt;/div>
&lt;h3 id="observations-without-narrative-flow">Observations without narrative flow&lt;/h3>
&lt;blockquote class="aside">We can get red noise by not doing the inversion step. This duplicates every element, which is bad, but we can scramble every odd element. (Technically, scrambling is a thing you do to the values of a low discrepancy sequence, and shuffling a thing a thing you do to their indexes. In fixed point they are kind of duals to one another, at least when you have a proper scramble, like &lt;em>nested uniform scramble&lt;/em> is.) This raises the spectre of a scrambled odd value colliding with an unscrambled even value. None of this is ideal from a discrepancy point of view, but whatever.&lt;/blockquote>
&lt;blockquote class="aside">There is another purely real rotation we can do: a quarter turn of the frequency spectrum, using &lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mi>e&lt;/mi>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mi>π&lt;/mi>&lt;mi>n&lt;/mi>&lt;mi mathvariant="normal">/&lt;/mi>&lt;mn>2&lt;/mn>&lt;/mrow>&lt;/msup>&lt;mo>=&lt;/mo>&lt;mo>…&lt;/mo>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo>…&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">e^{i\pi n/2} = \ldots -1,0,1,0,-1,0,1 \ldots&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.938em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">e&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.938em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mord mathdefault mtight" style="margin-right:0.03588em;">π&lt;/span>&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;span class="mord mtight">/&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.66666em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="minner">…&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">−&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="minner">…&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>You can fill in the zeros with another sequence generated with another shuffled Kronecker sequence. &lt;a href="http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/">Martin Robert&amp;rsquo;s R2&lt;/a> works well. A quarter turn of red noise and a quarter turn of blue noise gets you green? and.. violet? I guess? noise? With the middle frequencies band-passed or cut. Unfortunately, it doesn&amp;rsquo;t extend to 2D using the technique I&amp;rsquo;m about to describe so I&amp;rsquo;m dropping it here. That it doesn&amp;rsquo;t work is interesting in its own right, I suppose.&lt;/blockquote>
&lt;blockquote class="aside">&lt;code>blue&lt;/code> doesn&amp;rsquo;t have equidistribution. That is, some inputs map to the same output. &lt;code>0&lt;/code> appears twice and who knows about &lt;code>0x8000_0000&lt;/code>. But it&amp;rsquo;s also lost an entire bit in the interleaving of two sequences. These are both length &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>32&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{32}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> and they interleave to a sequence of length &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>33&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{33}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. We only have 32 bits to index it with. Rounding the constants to have a zero bit in the last place (and a one bit in the second last place) gives us a pair of sequences of length &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mn>2&lt;/mn>&lt;mn>31&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">2^{31}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. Now every value before the gray code round is even, but we know exactly what values we&amp;rsquo;re missing, the odd values, and what values we are double counting, the even values. I&amp;rsquo;m not bothered about that low bit, because we&amp;rsquo;re going to round it away anyway on conversion to float, and if you want integers, the high bits are better.&lt;/blockquote>
&lt;h2 id="2d-blue-noise">2D blue noise&lt;/h2>
&lt;p>Dumping it out in 2D doesn&amp;rsquo;t work, but the way it doesn&amp;rsquo;t work is instructive so let&amp;rsquo;s look at it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">spectrum_2d&lt;/span>(img):
dft &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>abs(np&lt;span style="color:#f92672">.&lt;/span>fft&lt;span style="color:#f92672">.&lt;/span>fftshift(np&lt;span style="color:#f92672">.&lt;/span>fft&lt;span style="color:#f92672">.&lt;/span>fft2(img)))
dft &lt;span style="color:#f92672">/=&lt;/span> dft&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>clip(dft, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">lookit&lt;/span>(image):
f, ax &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>subplots(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>image&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>px, image&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>px))
ax&lt;span style="color:#f92672">.&lt;/span>axis(&lt;span style="color:#e6db74">&amp;#39;off&amp;#39;&lt;/span>)
ax&lt;span style="color:#f92672">.&lt;/span>imshow(np&lt;span style="color:#f92672">.&lt;/span>hstack((image, spectrum_2d(image))))
n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">384&lt;/span>
i &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>arange(n&lt;span style="color:#f92672">*&lt;/span>n)&lt;span style="color:#f92672">.&lt;/span>reshape((n,n))
noise &lt;span style="color:#f92672">=&lt;/span> blue(i) &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>ldexp(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>)
lookit(noise)
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/blue2d-bad.png" width="768" height="384" loading="lazy" />
&lt;/div>
&lt;p>It&amp;rsquo;s blue horizontally, but in no other direction. Okay. At this point, we can generate another noise image, transpose it so it&amp;rsquo;s blue vertically, and drop it on top, like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">noise[x,y] &lt;span style="color:#f92672">+&lt;/span> more_noise[y,x]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and yeah it works but the spectrum isn&amp;rsquo;t that good and &lt;a href="https://en.wikipedia.org/wiki/Convolution_of_probability_distributions">the triangle distribution you get out of the sum&lt;/a> isn&amp;rsquo;t all that low-discrepancy either. If you don&amp;rsquo;t care about discrepancy, you could use some cheap PRNG here instead of low discrepancy noise and filter this right in a shader. Since you could design the filter to smooth out some of the anisotropy this method has, I think it could be pretty good.&lt;/p>
&lt;p>But to preserve low discrepancy we can decide that the issue is the path the noise takes over the image, and so let&amp;rsquo;s find a better path. I tried to find a way to do this with just arithmetic, and I got nowhere. But I did find a path that works that&amp;rsquo;s easy to compute offline, and it turns out we can tile the path. So this might be an okay compromise.&lt;/p>
&lt;p>No imaginative thinking here, horizontal path bad circular path good. This bins pixels into concentric rings, then pixels within each ring are sorted by their angle.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">spiral&lt;/span>(n: u32, lo: float, hi: float):
x, y &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>meshgrid(np&lt;span style="color:#f92672">.&lt;/span>linspace(lo, hi, n), np&lt;span style="color:#f92672">.&lt;/span>linspace(lo, hi, n))
&lt;span style="color:#75715e"># two sqrts: one for the distance, two to adjust for spirals closer to&lt;/span>
&lt;span style="color:#75715e"># the origin being tighter (think random sampling in a circle)&lt;/span>
xy &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>round(np&lt;span style="color:#f92672">.&lt;/span>sqrt(np&lt;span style="color:#f92672">.&lt;/span>sqrt(x&lt;span style="color:#f92672">*&lt;/span>x &lt;span style="color:#f92672">+&lt;/span> y&lt;span style="color:#f92672">*&lt;/span>y)) &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sqrt(n&lt;span style="color:#f92672">*&lt;/span>n &lt;span style="color:#f92672">+&lt;/span> n&lt;span style="color:#f92672">*&lt;/span>n))
&lt;span style="color:#75715e"># rescaled to a reasonable range that makes debugging possible without&lt;/span>
&lt;span style="color:#75715e"># a third eye&lt;/span>
angles &lt;span style="color:#f92672">=&lt;/span> (np&lt;span style="color:#f92672">.&lt;/span>arctan2(y, x) &lt;span style="color:#f92672">+&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>pi) &lt;span style="color:#f92672">/&lt;/span> (&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>pi)
&lt;span style="color:#75715e"># sort by magnitudes then angles (I don&amp;#39;t know why lexsort is&lt;/span>
&lt;span style="color:#75715e"># little-endian), then invert the sort&lt;/span>
spiral &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>lexsort((angles&lt;span style="color:#f92672">.&lt;/span>flatten(), xy&lt;span style="color:#f92672">.&lt;/span>flatten()))&lt;span style="color:#f92672">.&lt;/span>argsort()
&lt;span style="color:#66d9ef">return&lt;/span> spiral&lt;span style="color:#f92672">.&lt;/span>reshape((n,n))
s &lt;span style="color:#f92672">=&lt;/span> spiral(n, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1.0&lt;/span>, &lt;span style="color:#ae81ff">1.0&lt;/span>)
noise &lt;span style="color:#f92672">=&lt;/span> blue(s) &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>ldexp(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>)
lookit(noise)
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/blue2d-stillbad.png" width="768" height="384" loading="lazy" />
&lt;/div>
&lt;p>&amp;hellip; looks weird. Something to do with the origin. Don&amp;rsquo;t wanna think about it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">s &lt;span style="color:#f92672">=&lt;/span> spiral(n, &lt;span style="color:#ae81ff">2.0&lt;/span>, &lt;span style="color:#ae81ff">4.0&lt;/span>)
noise &lt;span style="color:#f92672">=&lt;/span> blue(s) &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>ldexp(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>)
lookit(noise)
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/blue2d.png" width="768" height="384" loading="lazy" />
&lt;/div>
&lt;p>Nice. One reason this path is hard to replicate/approximate using only arithmetic on x and y is that it wraps at the edges in a nice symmetry breaking way that I don&amp;rsquo;t really understand:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">spiral(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">2.0&lt;/span>, &lt;span style="color:#ae81ff">4.0&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">[[ 0 2 1 6 10 20 19 32]
[ 4 3 7 12 11 21 34 33]
[ 5 8 14 13 23 22 35 47]
[ 9 16 15 25 24 37 36 48]
[18 17 27 26 39 38 49 56]
[30 29 28 41 40 51 50 57]
[31 44 43 42 53 52 59 58]
[46 45 55 54 62 61 60 63]]
&lt;/code>&lt;/pre>&lt;p>And here it is with a 64x64 path, tiled using the &lt;a href="https://en.wikipedia.org/wiki/Z-order_(curve)">z-order curve&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">left_shift_2&lt;/span>(x: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
x &lt;span style="color:#f92672">=&lt;/span> (x &lt;span style="color:#f92672">^&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>)) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0x0000ffff&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> (x &lt;span style="color:#f92672">^&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>)) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0x00ff00ff&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> (x &lt;span style="color:#f92672">^&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>)) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0x0f0f0f0f&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> (x &lt;span style="color:#f92672">^&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0x33333333&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> (x &lt;span style="color:#f92672">^&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0x55555555&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> u32(x)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">z_order&lt;/span>(x: u32, y: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
&lt;span style="color:#66d9ef">return&lt;/span> left_shift_2(x) &lt;span style="color:#f92672">+&lt;/span> (left_shift_2(y) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">1&lt;/span>))
tile_bits &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
tile_n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> tile_bits
tile_mask &lt;span style="color:#f92672">=&lt;/span> tile_n &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
tile_path &lt;span style="color:#f92672">=&lt;/span> spiral(tile_n, &lt;span style="color:#ae81ff">2.0&lt;/span>, &lt;span style="color:#ae81ff">4.0&lt;/span>)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">blue_2d&lt;/span>(x: u32, y: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
x_lo &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">&amp;amp;&lt;/span> tile_mask
y_lo &lt;span style="color:#f92672">=&lt;/span> y &lt;span style="color:#f92672">&amp;amp;&lt;/span> tile_mask
x_hi &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> tile_bits
y_hi &lt;span style="color:#f92672">=&lt;/span> y &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> tile_bits
tile &lt;span style="color:#f92672">=&lt;/span> z_order(x_hi, y_hi)
i &lt;span style="color:#f92672">=&lt;/span> (tile &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> u32(&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>tile_bits)) &lt;span style="color:#f92672">+&lt;/span> tile_path[y_lo, x_lo]
&lt;span style="color:#66d9ef">return&lt;/span> blue(i)
x, y &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>meshgrid(np&lt;span style="color:#f92672">.&lt;/span>arange(n), np&lt;span style="color:#f92672">.&lt;/span>arange(n))
noise &lt;span style="color:#f92672">=&lt;/span> blue_2d(x, y) &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>ldexp(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>)
lookit(noise)
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/blue2d-64.png" width="768" height="384" loading="lazy" />
&lt;/div>
&lt;p>Histogram&amp;rsquo;s still good:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">plt&lt;span style="color:#f92672">.&lt;/span>hist(noise&lt;span style="color:#f92672">.&lt;/span>flatten(), &lt;span style="color:#ae81ff">384&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/blue2d-64-hist.png" width="900" height="200" loading="lazy" />
&lt;/div>
&lt;p>So that&amp;rsquo;s a 8KB lookup table that&amp;rsquo;s good for as much noise as you can index with an integer, and you can always &lt;a href="https://www.jcgt.org/published/0011/01/04/">get more constants&lt;/a> to replace the golden ratio with if you need more. (I&amp;rsquo;m not super satisfied with this, I wanted 0KB). Also some tiling artifacts where there is a too consistent &lt;em>lack&lt;/em> of correlation between adjacent pixels at tile boundaries, which is weird to think about. If you didn&amp;rsquo;t see it forget I said anything!!&lt;/p>
&lt;p>Part of the reason this works at all is that the quality of the noise that we&amp;rsquo;re threading through the image is not, spectrum-wise, all that good. With better noise, not only do you see the tiling clearly, the spectrum is really no better&amp;ndash;it&amp;rsquo;s determined by the spiral function in a way I don&amp;rsquo;t understand. So I&amp;rsquo;m not sure if this could be extended to 3D with just a path. But even if it does, for higher dimensions I doubt it would work all that well without huge lookup tables, because as the number of dimensions goes up the number of edge voxels increase faster than the number of interior voxels.&lt;/p>
&lt;h2 id="dither-revisited">Dither revisited&lt;/h2>
&lt;p>Since we started with dither, here&amp;rsquo;s some real dither. Usually for dither you want triangular noise rather than uniform. Triangular refers to the shape of the histogram. Alan Wolfe has &lt;a href="https://www.shadertoy.com/view/4t2SDh">a nice way of getting a triangle distribution out of uniform noise&lt;/a> that perfectly preserves discrepancy, so I&amp;rsquo;m going to use that. Hastily converted to python:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">uniform_to_triangle_dist&lt;/span>(x):
&lt;span style="color:#75715e"># From demofox @ https://www.shadertoy.com/view/4t2SDh&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> (x &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
orig &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2.0&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>
nz &lt;span style="color:#f92672">=&lt;/span> orig &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
x[&lt;span style="color:#f92672">~&lt;/span>nz] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
x[nz] &lt;span style="color:#f92672">=&lt;/span> orig[nz] &lt;span style="color:#f92672">/&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sqrt(np&lt;span style="color:#f92672">.&lt;/span>abs(orig[nz]))
x &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">-&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sign(orig) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>
x &lt;span style="color:#f92672">=&lt;/span> (x &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> x
&lt;/code>&lt;/pre>&lt;/div>&lt;p>An alternative would be to use &lt;a href="http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/">R2&lt;/a> to get another noise value to add to the first, you only need an extra multiply after all the shuffling to get it. Yet another alternative would be use more noise offset by half a tile to obscure the tiling artifacts.&lt;/p>
&lt;p>&lt;a href="https://gist.github.com/graemephi/3a90bc543aa974f7de04fa100c66bdc2#file-ldnoise-py-L278">Code&amp;rsquo;s here&lt;/a>. Quantized to 4 bits with 2 bits of dither. The top row is a gradient we&amp;rsquo;re dithering and what you get quantizing without dithering. Then it&amp;rsquo;s left: uniform noise dither, right: triangle noise dither. And top to bottom: random, this post&amp;rsquo;s white noise, this post&amp;rsquo;s blue noise, and last I&amp;rsquo;ve put known-good &lt;a href="http://momentsingraphics.de/BlueNoise.html">void and cluster blue noise&lt;/a>.&lt;/p>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/dither-gradient.png" width="1024" height="500" loading="lazy" />
&lt;/div>
&lt;p>Yup, it dithers 👍 Not as good as a good texture, but that&amp;rsquo;s okay.&lt;/p>
&lt;p>The white noise&amp;hellip; I don&amp;rsquo;t know what I expected.&lt;/p>
&lt;h2 id="bonus">Bonus&lt;/h2>
&lt;p>The low bits of the spiral function have a blue spectrum:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">s &lt;span style="color:#f92672">=&lt;/span> (spiral(&lt;span style="color:#ae81ff">384&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.08&lt;/span>, &lt;span style="color:#ae81ff">0.08&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
lookit(s)
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/spiral-low-bits.png" width="768" height="384" loading="lazy" />
&lt;/div>
&lt;p>Which suggests maybe we can reverse the bits and get something interesting out?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">s &lt;span style="color:#f92672">=&lt;/span> u32(spiral(&lt;span style="color:#ae81ff">384&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.08&lt;/span>, &lt;span style="color:#ae81ff">0.08&lt;/span>))
s &lt;span style="color:#f92672">=&lt;/span> masked_xorshift(s, &lt;span style="color:#ae81ff">2&lt;/span>)
s &lt;span style="color:#f92672">^=&lt;/span> s &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
s &lt;span style="color:#f92672">=&lt;/span> reverse_bits32(s)
s &lt;span style="color:#f92672">=&lt;/span> nested_uniform_scramble(s)
lookit(s &lt;span style="color:#f92672">/&lt;/span> s&lt;span style="color:#f92672">.&lt;/span>max())
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/permuted-spiral.png" width="768" height="384" loading="lazy" />
&lt;/div>
&lt;p>Huh. Conceptually, this is just a reordering of pixels&amp;ndash;you could replace that divide by a shift to turn it into a true permutation. It&amp;rsquo;s not noise, though. I tried some things, like rotating some tiles, placing the origin of the spiral at the corners, adding random jitter to the magnitude and angles in &lt;code>spiral&lt;/code>, but nothing worked very well at getting rid of the obvious structure while maintaining the spectrum. This is interesting, though.&lt;/p>
&lt;h2 id="bonus-2">Bonus 2&lt;/h2>
&lt;p>I have no idea what is going on here.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">red&lt;/span>(i: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
s &lt;span style="color:#f92672">=&lt;/span> white_shuffle(i &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
r &lt;span style="color:#f92672">=&lt;/span> kronecker_sequence(s, &lt;span style="color:#ae81ff">2654435770&lt;/span>) &lt;span style="color:#75715e"># 0.31 fixed point golden ratio&lt;/span>
r[(i &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">^=&lt;/span> r[(i &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">6&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> r
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">red_2d&lt;/span>(x: u32, y: u32) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> u32:
&lt;span style="color:#75715e"># note the right shift--this isn&amp;#39;t z-order&lt;/span>
i &lt;span style="color:#f92672">=&lt;/span> left_shift_2(x) &lt;span style="color:#f92672">+&lt;/span> (left_shift_2(y) &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> u32(&lt;span style="color:#ae81ff">1&lt;/span>))
&lt;span style="color:#66d9ef">return&lt;/span> red(i)
noise &lt;span style="color:#f92672">=&lt;/span> red_2d(x, y) &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>ldexp(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>)
lookit(noise)
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/red2d.png" width="768" height="384" loading="lazy" />
&lt;/div>
&lt;p>Histogram&amp;rsquo;s okay, too, but it&amp;rsquo;s pretty bad within the bins.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">plt&lt;span style="color:#f92672">.&lt;/span>hist(noise&lt;span style="color:#f92672">.&lt;/span>flatten(), &lt;span style="color:#ae81ff">384&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/some-low-discrepancy-noise-functions/red2d-hist.png" width="900" height="200" loading="lazy" />
&lt;/div>
&lt;h2 id="bottom-text">Bottom text&lt;/h2>
&lt;p>Here&amp;rsquo;s the &lt;a href="https://gist.github.com/graemephi/3a90bc543aa974f7de04fa100c66bdc2">code for this post&lt;/a> without all my words around it.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Also known as &amp;ldquo;linear&amp;rdquo;. Who comes up with this stuff?&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>An interesting reason to use the golden ratio sequence is it turns out it&amp;rsquo;s easy to come up with more constants&amp;ndash;that is, aside from the golden ratio&amp;ndash;that let you generate multiple streams of correlated noise cheaply. R2 is one way, and there are others. But it&amp;rsquo;s a whole thing.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>If it seems weird that I&amp;rsquo;m so singularly focused on this property of &lt;em>nested uniform scramble&lt;/em> it&amp;rsquo;s because I figured out &lt;code>masked_xorshift&lt;/code> before I found out about that paper, and I&amp;rsquo;m not sure I would have figured it out if I thought &lt;em>nested uniform scramble&lt;/em> was the model to follow.&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>This fact is pretty elementary DSP-wise but Bart Wronski&amp;rsquo;s post was the only thing I could find that discusses it at a high level without assuming you are the sort of person who thinks that negative frequencies are a reasonable idea.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>I told you not to worry about it!! But I can&amp;rsquo;t find any explanation of this that isn&amp;rsquo;t laden down with DSP nonsense so while I&amp;rsquo;m at it: the DFT gives you a representation of a signal as a sum of scaled-and-shifted sine waves, right? And you shift a signal around in time and all the sine waves change phase, in lockstep with each other. In the DFT sine waves are encoded as complex numbers&amp;ndash;a magnitude for the sine wave&amp;rsquo;s scale, and an angle, for its phase&amp;ndash;and it just so happens that multiplying a complex number by unit complex numbers only modifies the angle. So shifting signals &lt;em>in time&lt;/em> can be done in the frequency domain by multiplying the complex coefficient of each sine wave by &lt;code>exp(1j * carefully_chosen_shift_amount_per_sine_wave * 2 * pi)&lt;/code>. The shorter the wavelength, the larger the shift, because shorter waves complete more of their cycle per unit time.
&lt;br>
&lt;br>
That&amp;rsquo;s shifting in time. If you do the &lt;em>exact same thing&lt;/em> in the time domain&amp;ndash;multiply the time domain samples by those unit complex numbers&amp;ndash;you shift the frequency components around. That&amp;rsquo;s shifting in frequency. Okay? Okay.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>And the reason I keep italicizing &lt;em>nested uniform scramble&lt;/em> is because &lt;em>nested uniform scramble&lt;/em> is a nested uniform scramble. There are others, you see.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Difference Decay</title><link>https://graemephi.github.io/posts/difference-decay/</link><pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate><guid>https://graemephi.github.io/posts/difference-decay/</guid><description>&lt;p>Here&amp;rsquo;s a variation on the &lt;a href="https://theorangeduck.com/page/spring-roll-call">damper&lt;/a> I keep coming up with uses for. I find my code that uses it a bit subtle and annoying to figure out, hence this post.&lt;/p>
&lt;p>That theorangeduck post is about springs, which could be an interesting extension to this, but this post is setting our sights lower.&lt;/p>
&lt;p>My first use for this was to clean up a noisy/unreliable clock by using a high resolution clock, taking the noisy clock&amp;rsquo;s drift as authoritative. But I think of it more generally, as combining two signals &lt;code>s&lt;/code> and &lt;code>n&lt;/code> to produce a third with the short-term character of &lt;code>s&lt;/code> but the long-term average of &lt;code>n&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">float&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> &lt;span style="color:#f92672">*&lt;/span>accumulator, &lt;span style="color:#66d9ef">float&lt;/span> dt, &lt;span style="color:#66d9ef">float&lt;/span> s, &lt;span style="color:#66d9ef">float&lt;/span> n)
{
&lt;span style="color:#66d9ef">float&lt;/span> acc &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>accumulator;
&lt;span style="color:#66d9ef">float&lt;/span> err &lt;span style="color:#f92672">=&lt;/span> s &lt;span style="color:#f92672">-&lt;/span> n;
acc &lt;span style="color:#f92672">+=&lt;/span> err;
acc &lt;span style="color:#f92672">*=&lt;/span> expf(&lt;span style="color:#f92672">-&lt;/span>dt);
&lt;span style="color:#66d9ef">float&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> n &lt;span style="color:#f92672">+&lt;/span> acc;
acc &lt;span style="color:#f92672">-=&lt;/span> err;
&lt;span style="color:#f92672">*&lt;/span>accumulator &lt;span style="color:#f92672">=&lt;/span> acc;
&lt;span style="color:#66d9ef">return&lt;/span> x;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>accumulator&lt;/code> is initialized to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">0&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span> and we expect &lt;code>dt&lt;/code> to be small and positive, so you can mentally substitute &lt;code>expf(-dt)&lt;/code> with &lt;code>1 - dt&lt;/code>.&lt;/p>
&lt;p>The easiest way to explain it is to work backwards. The &lt;code>+=&lt;/code>, &lt;code>-=&lt;/code> pair removes a delay term (&lt;code>err_prev&lt;/code> in the following), and is equivalent to:&lt;/p>
&lt;pre tabindex="0">&lt;code>err = s - n;
acc = (acc + (err - err_prev)) * expf(-dt);
err_prev = err;
x = n + acc;
&lt;/code>&lt;/pre>&lt;p>To see what this is doing, suppose we don&amp;rsquo;t apply the &lt;code>expf(-dt)&lt;/code> decay factor. Then, over all &lt;code>s&lt;/code> and &lt;code>n&lt;/code>, we get something like &lt;code>cumsum([0, diff(s - n)])&lt;/code>, which is a no-op. Written out,&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;msub>&lt;mtext>acc&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;msub>&lt;mtext>acc&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo>+&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;mi>i&lt;/mi>&lt;/munderover>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>k&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;mi>i&lt;/mi>&lt;/munderover>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>k&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;mi>i&lt;/mi>&lt;/munderover>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;msub>&lt;mi>s&lt;/mi>&lt;mi>i&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;msub>&lt;mi>n&lt;/mi>&lt;mi>i&lt;/mi>&lt;/msub>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;annotation encoding="application/x-tex">
\begin{aligned}
\text{acc}_i &amp;amp;= \text{acc}_{i-1} + (\text{err}_i - \text{err}_{i-1}) \\
&amp;amp;= \sum_{k=0}^i (\text{err}_k - \text{err}_{k-1}) \\
&amp;amp;= \sum_{k=0}^i \text{err}_k - \sum_{k=1}^i \text{err}_{k-1} \\
&amp;amp;= \text{err}_i \\
&amp;amp;= s_i - n_i
\end{aligned}
&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:11.327564em;vertical-align:-5.413782em;">&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-r">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:5.913782em;">&lt;span style="top:-8.885451em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">acc&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-6.413782em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;span style="top:-0.557887em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;span style="top:0.942113em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:5.413782em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="col-align-l">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:5.913782em;">&lt;span style="top:-8.885451em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">acc&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-6.413782em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8116690000000002em;">&lt;span style="top:-1.8478869999999998em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.0500049999999996em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.300005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.302113em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3361079999999999em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8116690000000002em;">&lt;span style="top:-1.8478869999999998em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.0500049999999996em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.300005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.302113em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8116690000000002em;">&lt;span style="top:-1.8478869999999998em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.0500049999999996em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.300005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.302113em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3361079999999999em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-0.557887em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:0.942113em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">s&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:5.413782em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>so our value for &lt;code>x&lt;/code> would always equal the most recent &lt;code>s&lt;/code>. Likewise, if we zeroed out &lt;code>acc&lt;/code> completely, the damper would return &lt;code>n&lt;/code> every time.&lt;/p>
&lt;p>Applying the decay to &lt;code>acc&lt;/code> lets us decay &lt;em>old updates&lt;/em> to the difference between &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">s&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>. If &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">s&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span> grow at the different rates, this shrinks the gap between them and stops them drifting apart. But if &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span> updates less frequently or with jitter, this fills in the missing/incorrect detail with &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">s&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;/span>&lt;/span>&lt;/span>.&lt;/p>
&lt;p>If you care about tuning the decay factor or having something more momentum than exponential decay, check out the &lt;a href="https://theorangeduck.com/page/spring-roll-call">theorangeduck post&lt;/a>. It&amp;rsquo;s good!! One thing to note is this damper doesn&amp;rsquo;t have any stability problems for large &lt;code>dt&lt;/code> that I&amp;rsquo;m aware of, you just lose more history.&lt;/p>
&lt;p>While retreading the maths for this post and trying to see if I could get it to look more intuitively damper-y, I noticed that if you scale the error difference term by the inverse of the decay to cancel out the first decay you get&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;msub>&lt;mtext>acc&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;mo stretchy="false">[&lt;/mo>&lt;msub>&lt;mtext>acc&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo>+&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;mi>exp&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>d&lt;/mi>&lt;mi>t&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo stretchy="false">]&lt;/mo>&lt;mi>exp&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mo>−&lt;/mo>&lt;mi>d&lt;/mi>&lt;mi>t&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;msub>&lt;mtext>acc&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mi>exp&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mo>−&lt;/mo>&lt;mi>d&lt;/mi>&lt;mi>t&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>+&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;annotation encoding="application/x-tex">
\begin{aligned}
\text{acc}_i &amp;amp; = [\text{acc}_{i-1}+(\text{err}_i - \text{err}_{i-1}) \exp(dt)] \exp(-dt) \\
&amp;amp;= \text{acc}_{i-1} \exp(-dt) +(\text{err}_i - \text{err}_{i-1})
\end{aligned}
&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;">&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-r">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.7500000000000002em;">&lt;span style="top:-3.91em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">acc&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.41em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.2500000000000002em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="col-align-l">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.7500000000000002em;">&lt;span style="top:-3.91em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">acc&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">exp&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mclose">]&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">exp&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">−&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.41em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">acc&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">exp&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">−&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.2500000000000002em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>which looks similar to the simple damper:&lt;/p>
&lt;pre tabindex="0">&lt;code>x = lerp(x, g, 1.0f - expf(-dt))
= g + (x - g)*expf(-dt)
&lt;/code>&lt;/pre>&lt;p>Instead of repeatedly folding &lt;code>g&lt;/code> into &lt;code>x&lt;/code>, we&amp;rsquo;ve isolated &lt;code>x - g&lt;/code> as &lt;code>acc&lt;/code>, and we repeatedly fold updates to &lt;code>g&lt;/code> into &lt;code>acc&lt;/code>, which we decay. This idea of isolating the difference is what I was thinking about when I came up with this; it&amp;rsquo;s really another &lt;a href="https://graemephi.github.io/posts/dumb-tricks-with-phase-inversion">phase inversion trick&lt;/a>. So maybe applying this scaling factor is more correct?&lt;/p>
&lt;p>Anyway, I came up with this to fix a decades old visual stuttering issue in the rhythm game Etterna, a fork of Stepmania. They position objects on the screen by repeatedly querying the system audio API for it&amp;rsquo;s playback position. This turns out to work exactly as you&amp;rsquo;d hope on some hardware and APIs, and really not work at all on others. The game is visually stripped down enough that this looks like it has bad frame pacing issues, but the issue was entirely due to the reported audio position. There are variations here (figured out with &lt;a href="https://github.com/wolfpld/tracy">Tracy&lt;/a>):&lt;/p>
&lt;ul>
&lt;li>
&lt;p>WaveOut, interestingly, appears to directly report whatever the hardware driver tells it. This means it works great for some devices and terrible on others. I first hit this issue when a driver update for my USB sound card changed the behaviour here, introducing jitter you could &lt;em>see&lt;/em>. On the other hand, with my motherboard&amp;rsquo;s audio you instead see nice steady drift away from &lt;code>QueryPerformanceCounter&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DirectSound appears to correct for drift and jitter, and this turns out to be bad. When you sample playback positions it looks to be in sync with wall time, but audio hardware &lt;em>does&lt;/em> drift, and DirectSound eventually corrects for this by jumping. Which means a visible jump in the game. Furthermore, it only reports a new sample position every 10ms, and at the point you are querying you have no idea how long ago the update to the position occurred. You basically end up with a few milliseconds of jitter, unless you&amp;rsquo;re running at very high frame rates.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ALSA and PulseAudio appear to have no way to query this, so you only know the time you submitted the last buffer. This is probably fine, and possibly none of this would have been a problem if the game never queried the other APIs in the first place. You can get a continuous estimate by extrapolating from the submission time, which I suspect is what you get in the good WaveOut case. Due to the architecture of the game, this ended up with the same unknown update time issue as DirectSound.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>And possibly more, but I stopped looking.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So I wanted something that would eliminate jitter for all of these, without any parameter tuning, and not degrade the ideal &amp;lsquo;good driver under WaveOut&amp;rsquo; case in any way. This worked well.&lt;/p>
&lt;p>One thing here worth mentioning, where &lt;code>s&lt;/code> is high-quality time from &lt;code>QueryPerformanceCounter&lt;/code> or equivalent and &lt;code>n&lt;/code> is low-quality time from somewhere else, is that we only have samples &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">s(t_0)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">n(t_1)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>. That is, we do not actually know the values of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>t&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">t&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.61508em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and we just assume &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo>≈&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">t_0 \approx t_1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.76508em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">≈&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.76508em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. For this problem in particular, you might want to take a third sample &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">s(t_2)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> and check that &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>−&lt;/mo>&lt;mi>s&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">s(t_2) - s(t_0)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> is sufficiently small before using &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">n(t_1)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>, as your &lt;a href="https://en.wikipedia.org/wiki/Time_slice">time slice&lt;/a> can run out between sampling &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">s&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>.&lt;/p>
&lt;p>I wish I could say something about control theory here, since this kind of thing seems to be right in its wheelhouse. But I don&amp;rsquo;t really know any.&lt;/p></description></item><item><title>The Discrete Fourier Transform, But With Triangles</title><link>https://graemephi.github.io/posts/triangle-dft/</link><pubDate>Sat, 14 Dec 2019 18:34:03 +0100</pubDate><guid>https://graemephi.github.io/posts/triangle-dft/</guid><description>&lt;p>Here&amp;rsquo;s something I&amp;rsquo;ve been wondering about lately: what happens if you replace all the sine waves in the fourier transform with triangle waves? If you are like me and would like to play around with such a thing, this post has a method to get a representation of a signal as scaled-and-shifted &lt;em>band-limited&lt;/em> triangle waves in &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>O&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>n&lt;/mi>&lt;mi>log&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mi>n&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">O(n\log n)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">lo&lt;span style="margin-right:0.01389em;">g&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> time. This is fast enough that we can compute first and ask questions about what it&amp;rsquo;s good for later (I&amp;rsquo;ve yet to find anything). Actually, the stuff in this post will work for any periodic function, not just triangle waves, but this was the idea that motivated me to figure this out.&lt;/p>
&lt;p>To get more precise in what I&amp;rsquo;m trying to do here, here&amp;rsquo;s what I want. The DFT takes a signal made up of sine waves with amplitudes &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>a&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">a_k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.58056em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>, phases &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>θ&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\theta_k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.84444em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.02778em;">θ&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and integer frequencies &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>k&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and produces a signal that has the value &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>a&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;msup>&lt;mi>e&lt;/mi>&lt;mrow>&lt;mi>i&lt;/mi>&lt;msub>&lt;mi>θ&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;/mrow>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">a_ke^{i\theta_k}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.9991079999999999em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">e&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8491079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3448em;">&lt;span style="top:-2.3487714285714287em;margin-left:-0.02778em;margin-right:0.07142857142857144em;">&lt;span class="pstrut" style="height:2.5em;">&lt;/span>&lt;span class="sizing reset-size3 size1 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15122857142857138em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> at &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>k&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>. I want a transform that does the same for triangle waves.&lt;/p>
&lt;p>I had a few bad starts on this&amp;ndash;for one thing, triangle waves are not orthogonal to each other at all&amp;ndash;but it all came together when I asked the following question: What is a cosine wave given as a sum of triangle waves?&lt;/p>
&lt;p>First, we need a definition of a triangle wave. With &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>K&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">K&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.07153em;">K&lt;/span>&lt;/span>&lt;/span>&lt;/span> being the number of harmonics and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>m&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>2&lt;/mn>&lt;mi>k&lt;/mi>&lt;mo>+&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">m = 2k + 1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">m&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.77777em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>,&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mtext>tri&lt;/mtext>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;mrow>&lt;mi>K&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/munderover>&lt;mfrac>&lt;mn>1&lt;/mn>&lt;msup>&lt;mi>m&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mfrac>&lt;mi>cos&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>2&lt;/mn>&lt;mi>π&lt;/mi>&lt;mi>m&lt;/mi>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex"> \text{tri}(x) = \sum_{k=0}^{K-1} \frac{1}{m^2} \cos(2\pi mx). &lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord text">&lt;span class="mord">tri&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:3.1304490000000005em;vertical-align:-1.302113em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8283360000000002em;">&lt;span style="top:-1.8478869999999998em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.0500049999999996em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.300005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.07153em;">K&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.302113em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.32144em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathdefault">m&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.740108em;">&lt;span style="top:-2.9890000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.686em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">cos&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">π&lt;/span>&lt;span class="mord mathdefault">m&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>I&amp;rsquo;ve adapted&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> this from the first of many definitions of a triangle wave on &lt;a href="https://en.wikipedia.org/wiki/Triangle_wave">Wikipedia&lt;/a>, where it&amp;rsquo;s presented without justification or citation. Personally, I don&amp;rsquo;t understand where it comes from, but it is pretty much the frequency domain represention of a triangle wave and that&amp;rsquo;s all we need. For the rest of this post, I&amp;rsquo;m going to leave &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>K&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">K&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.07153em;">K&lt;/span>&lt;/span>&lt;/span>&lt;/span> implicitly defined as the largest value it can take without introducing aliasing in its current context.&lt;/p>
&lt;p>For now, we just want to think about finding the &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>X&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">X_k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.83333em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> that gives us&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>cos&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>2&lt;/mn>&lt;mi>π&lt;/mi>&lt;mtext mathvariant="bold">x&lt;/mtext>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/munderover>&lt;msub>&lt;mi>X&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;mtext>tri&lt;/mtext>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>k&lt;/mi>&lt;mtext mathvariant="bold">x&lt;/mtext>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex"> \cos(2\pi \textbf{x}) = \sum_{k=0}^{N-1} X_k\text{tri}(k\textbf{x}) &lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mop">cos&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">π&lt;/span>&lt;span class="mord text">&lt;span class="mord textbf">x&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:3.1304490000000005em;vertical-align:-1.302113em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8283360000000002em;">&lt;span style="top:-1.8478869999999998em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.0500049999999996em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.300005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.302113em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord text">&lt;span class="mord">tri&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mord text">&lt;span class="mord textbf">x&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>where &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mtext mathvariant="bold">x&lt;/mtext>&lt;mo stretchy="false">[&lt;/mo>&lt;mi>n&lt;/mi>&lt;mo stretchy="false">]&lt;/mo>&lt;mo>=&lt;/mo>&lt;mi>n&lt;/mi>&lt;mi mathvariant="normal">/&lt;/mi>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\textbf{x}[n] = n/N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord text">&lt;span class="mord textbf">x&lt;/span>&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mclose">]&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mord">/&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>. Restricting ourselves to band-limited triangle waves gives us the fact that the lowest frequency of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mtext>tri&lt;/mtext>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>k&lt;/mi>&lt;mtext mathvariant="bold">x&lt;/mtext>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\text{tri}(k\textbf{x})&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord text">&lt;span class="mord">tri&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mord text">&lt;span class="mord textbf">x&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> is &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>k&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>. Then &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mtext>tri&lt;/mtext>&lt;mo stretchy="false">(&lt;/mo>&lt;mtext mathvariant="bold">x&lt;/mtext>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\text{tri}(\textbf{x})&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord text">&lt;span class="mord">tri&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord text">&lt;span class="mord textbf">x&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> with &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">k = 1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span> is the only member of our series that is not orthogonal to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>cos&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>2&lt;/mn>&lt;mi>π&lt;/mi>&lt;mtext mathvariant="bold">x&lt;/mtext>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\cos(2\pi \textbf{x})&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mop">cos&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">2&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">π&lt;/span>&lt;span class="mord text">&lt;span class="mord textbf">x&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>, so we know &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>X&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo>=&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">X_1 = 1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.83333em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>. But this introduces odd harmonics all the way up, and so the coefficient of the next odd triangle wave at &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>3&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">k = 3&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">3&lt;/span>&lt;/span>&lt;/span>&lt;/span> must use its lowest frequency to subtract out the first odd harmonic of the triangle wave at &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">k = 1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>, so &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>X&lt;/mi>&lt;mn>3&lt;/mn>&lt;/msub>&lt;mo>=&lt;/mo>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;mi mathvariant="normal">/&lt;/mi>&lt;mn>9&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">X_3 = -1/9&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.83333em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">−&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">/&lt;/span>&lt;span class="mord">9&lt;/span>&lt;/span>&lt;/span>&lt;/span>. This adds yet more harmonics for later triangle waves to clean up. We keep going like this until we&amp;rsquo;ve accounted for all &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> triangle waves.&lt;/p>
&lt;p>If that was too quick, here it is in pictures. The frequency domain representation is overlaid on top.&lt;/p>
&lt;img src="https://graemephi.github.io/posts/triangle-dft/cosine.png" width="714" height="625" loading="lazy" />
&lt;p>It&amp;rsquo;s not hard to see that this logic mostly works for arbitrary functions, too. We lose the orthogonality to kick off the process, but the whole point of the DFT is that sines and cosines form an orthogonal basis, so we only need orthogonality to the lowest frequency. As we go, we successively remove frequencies, so there is always a new lowest frequency to remove&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Before we can implement this we also need to handle the phase of each frequency component. When we see &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>a&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;msup>&lt;mi>e&lt;/mi>&lt;mrow>&lt;mi>i&lt;/mi>&lt;msub>&lt;mi>θ&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;/mrow>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">a_ke^{i\theta_k}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.9991079999999999em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">a&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">e&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8491079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3448em;">&lt;span style="top:-2.3487714285714287em;margin-left:-0.02778em;margin-right:0.07142857142857144em;">&lt;span class="pstrut" style="height:2.5em;">&lt;/span>&lt;span class="sizing reset-size3 size1 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15122857142857138em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> at &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>k&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>, we need to align the phase of the lowest frequency of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mtext>tri&lt;/mtext>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>k&lt;/mi>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\text{tri}(kx)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord text">&lt;span class="mord">tri&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> with &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>θ&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">\theta_k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.84444em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.02778em;">θ&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. We&amp;rsquo;re working in the frequency domain, so we need this thing from the shift theorem&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>X&lt;/mi>&lt;mi>n&lt;/mi>&lt;/msub>&lt;msup>&lt;mi>e&lt;/mi>&lt;mrow>&lt;mo>−&lt;/mo>&lt;mi>i&lt;/mi>&lt;mn>2&lt;/mn>&lt;mi>π&lt;/mi>&lt;mi>n&lt;/mi>&lt;mi mathvariant="normal">ℓ&lt;/mi>&lt;mi mathvariant="normal">/&lt;/mi>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex"> X_n e^{-i2\pi n\ell/N} &lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.0879999999999999em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.151392em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">e&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.938em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">−&lt;/span>&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;span class="mord mathdefault mtight" style="margin-right:0.03588em;">π&lt;/span>&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;span class="mord mtight">ℓ&lt;/span>&lt;span class="mord mtight">/&lt;/span>&lt;span class="mord mathdefault mtight" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>to apply a shift of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi mathvariant="normal">ℓ&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\ell&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">ℓ&lt;/span>&lt;/span>&lt;/span>&lt;/span>. In our case, &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>X&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">X&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;/span>&lt;/span>&lt;/span> contains the &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>1&lt;/mn>&lt;mi mathvariant="normal">/&lt;/mi>&lt;msup>&lt;mi>m&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">1/m^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.064108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">/&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">m&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> factors of the current triangle wave. We just need to know &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi mathvariant="normal">ℓ&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\ell&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">ℓ&lt;/span>&lt;/span>&lt;/span>&lt;/span>. Now, the lowest frequency of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mtext>tri&lt;/mtext>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>k&lt;/mi>&lt;mi>x&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\text{tri}(kx)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord text">&lt;span class="mord">tri&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mord mathdefault">x&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> is &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>X&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">X_k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.83333em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>, so we want to choose &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi mathvariant="normal">ℓ&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\ell&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">ℓ&lt;/span>&lt;/span>&lt;/span>&lt;/span> to satisfy&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>X&lt;/mi>&lt;mi>n&lt;/mi>&lt;/msub>&lt;msup>&lt;mi>e&lt;/mi>&lt;mrow>&lt;mo>−&lt;/mo>&lt;mi>i&lt;/mi>&lt;mn>2&lt;/mn>&lt;mi>π&lt;/mi>&lt;mi>n&lt;/mi>&lt;mi mathvariant="normal">ℓ&lt;/mi>&lt;mi mathvariant="normal">/&lt;/mi>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;/msup>&lt;mo>=&lt;/mo>&lt;msub>&lt;mi>X&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;msup>&lt;mi>e&lt;/mi>&lt;mrow>&lt;mi>i&lt;/mi>&lt;msub>&lt;mi>θ&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;/mrow>&lt;/msup>&lt;mspace width="1em"/>&lt;mtext>if &lt;/mtext>&lt;mi>n&lt;/mi>&lt;mo>=&lt;/mo>&lt;mi>k&lt;/mi>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex"> X_n e^{-i2\pi n\ell/N} = X_k e^{i\theta_k} \quad \text{if } n = k.&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.0879999999999999em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.151392em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">e&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.938em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">−&lt;/span>&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mord mtight">2&lt;/span>&lt;span class="mord mathdefault mtight" style="margin-right:0.03588em;">π&lt;/span>&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;span class="mord mtight">ℓ&lt;/span>&lt;span class="mord mtight">/&lt;/span>&lt;span class="mord mathdefault mtight" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.0491079999999997em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">e&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8991079999999998em;">&lt;span style="top:-3.113em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3448em;">&lt;span style="top:-2.3487714285714287em;margin-left:-0.02778em;margin-right:0.07142857142857144em;">&lt;span class="pstrut" style="height:2.5em;">&lt;/span>&lt;span class="sizing reset-size3 size1 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15122857142857138em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:1em;">&lt;/span>&lt;span class="mord text">&lt;span class="mord">if &lt;/span>&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.69444em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>So&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi mathvariant="normal">ℓ&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;mo>=&lt;/mo>&lt;mo>−&lt;/mo>&lt;mfrac>&lt;mi>N&lt;/mi>&lt;mrow>&lt;mn>2&lt;/mn>&lt;mi>π&lt;/mi>&lt;/mrow>&lt;/mfrac>&lt;mfrac>&lt;mn>1&lt;/mn>&lt;mi>k&lt;/mi>&lt;/mfrac>&lt;msub>&lt;mi>θ&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex"> \ell_k = -\frac{N}{2\pi}\frac{1}{k} \theta_k. &lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.84444em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">ℓ&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:2.04633em;vertical-align:-0.686em;">&lt;/span>&lt;span class="mord">−&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.36033em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">π&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.686em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.32144em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.686em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.02778em;">θ&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>This part seemed obvious when I was just turning ideas in my head into code but now that I write it out like this I&amp;rsquo;m not so sure.&lt;/p>
&lt;p>This is all we need to find the &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>X&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">X_k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.83333em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> in&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>f&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mtext mathvariant="bold">x&lt;/mtext>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>=&lt;/mo>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;mrow>&lt;mi>N&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/munderover>&lt;mi mathvariant="normal">∣&lt;/mi>&lt;msub>&lt;mi>X&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;mi mathvariant="normal">∣&lt;/mi>&lt;mtext>tri&lt;/mtext>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>k&lt;/mi>&lt;mtext mathvariant="bold">x&lt;/mtext>&lt;mo>+&lt;/mo>&lt;mfrac>&lt;mn>1&lt;/mn>&lt;mrow>&lt;mn>2&lt;/mn>&lt;mi>π&lt;/mi>&lt;/mrow>&lt;/mfrac>&lt;mi>arg&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>X&lt;/mi>&lt;mi>k&lt;/mi>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;mo stretchy="false">)&lt;/mo>&lt;mi mathvariant="normal">.&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex"> f(\textbf{x}) = \sum_{k=0}^{N-1} |X_k|\text{tri}(k\textbf{x} + \frac{1}{2\pi}\arg(X_k)). &lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10764em;">f&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord text">&lt;span class="mord textbf">x&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:3.1304490000000005em;vertical-align:-1.302113em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8283360000000002em;">&lt;span style="top:-1.8478869999999998em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.0500049999999996em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.300005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.10903em;">N&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.302113em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">∣&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">∣&lt;/span>&lt;span class="mord text">&lt;span class="mord">tri&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mord text">&lt;span class="mord textbf">x&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:2.00744em;vertical-align:-0.686em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.32144em;">&lt;span style="top:-2.314em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">2&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">π&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.677em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.686em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">ar&lt;span style="margin-right:0.01389em;">g&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault" style="margin-right:0.07847em;">X&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mord">.&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>Iterative algorithms spelled out in maths notation always feel a bit clunky to me, so rather than doing that, here&amp;rsquo;s some Python code to do it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> np
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">cis&lt;/span>(t):
&lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>cos(t) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>j&lt;span style="color:#f92672">*&lt;/span>np&lt;span style="color:#f92672">.&lt;/span>sin(t)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">inverse_tri_sum_bandlimited&lt;/span>(x):
&lt;span style="color:#66d9ef">assert&lt;/span>(np&lt;span style="color:#f92672">.&lt;/span>isrealobj(x)) &lt;span style="color:#75715e"># real signals only. i&amp;#39;m lazy&lt;/span>
n &lt;span style="color:#f92672">=&lt;/span> len(x)
nyquist &lt;span style="color:#f92672">=&lt;/span> n &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
y &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>fft&lt;span style="color:#f92672">.&lt;/span>fft(x)
m &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>arange(&lt;span style="color:#ae81ff">3&lt;/span>, nyquist, &lt;span style="color:#ae81ff">2&lt;/span>)
coefs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">/&lt;/span> (m&lt;span style="color:#f92672">*&lt;/span>m)
&lt;span style="color:#66d9ef">for&lt;/span> k &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, nyquist&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>):
&lt;span style="color:#75715e"># indices of the non-zero components of a triangle wave&lt;/span>
&lt;span style="color:#75715e"># with fundamental frequency k, not including the fundamental&lt;/span>
nz &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>arange(k&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>, nyquist, k&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;span style="color:#75715e"># construct the frequency domain of the triangle wave and subtract it off&lt;/span>
y[nz] &lt;span style="color:#f92672">-=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>abs(y[k]) &lt;span style="color:#f92672">*&lt;/span> coefs[:len(nz)] &lt;span style="color:#f92672">*&lt;/span> cis(nz &lt;span style="color:#f92672">*&lt;/span> (np&lt;span style="color:#f92672">.&lt;/span>angle(y[k]) &lt;span style="color:#f92672">/&lt;/span> k))
&lt;span style="color:#75715e"># fix up conjugate symmetry&lt;/span>
y[nyquist&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>:] &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>conj(y[nyquist&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;span style="color:#66d9ef">return&lt;/span> y&lt;/code>&lt;/pre>&lt;/div>
&lt;p>This makes use of the observation that once a frequency in &lt;code>y&lt;/code> has been zeroed out we never look at it again, so we can do the algorithm in-place. Also, band-limited triangle waves above half the nyquist frequency are just sine waves, so we don&amp;rsquo;t need to consider them at all.&lt;/p>
&lt;h2 id="some-graphs-to-think-about">Some Graphs To Think About&lt;/h2>
&lt;p>The nice thing about this algorithm is the result is in the same representation as given by the DFT. So, if the DFT is &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi mathvariant="script">F&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\mathcal{F}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathcal" style="margin-right:0.09931em;">F&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> and our triangle transform is &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi mathvariant="script">T&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\mathcal{T}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathcal" style="margin-right:0.25417em;">T&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>, then we can replace all the triangle waves in a function with sine waves by applying &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msup>&lt;mi mathvariant="script">F&lt;/mi>&lt;mrow>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msup>&lt;mi mathvariant="script">T&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\mathcal{F}^{-1}\mathcal{T}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8141079999999999em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord mathcal" style="margin-right:0.09931em;">F&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mord">&lt;span class="mord mathcal" style="margin-right:0.25417em;">T&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. Right? So, this does what you might expect:&lt;/p>
&lt;img src="https://graemephi.github.io/posts/triangle-dft/tritri.png" width="600" height="400" loading="lazy" />
&lt;p>But look at this:&lt;/p>
&lt;img src="https://graemephi.github.io/posts/triangle-dft/tribad.png" width="600" height="400" loading="lazy" />
&lt;p>What gives? Well, this is a problem the DFT has, too. We&amp;rsquo;re getting a representation of the signal as a sum of triangle waves but &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mtext>tri&lt;/mtext>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>1.5&lt;/mn>&lt;mtext mathvariant="bold">x&lt;/mtext>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\text{tri}(1.5\textbf{x})&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord text">&lt;span class="mord">tri&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">5&lt;/span>&lt;span class="mord text">&lt;span class="mord textbf">x&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> isn&amp;rsquo;t one of them. In the analogous case for the DFT this isn&amp;rsquo;t so bad because it ends up being represented by nearby sine waves. You get a nice exponential drop-off away from the true frequency. For triangle waves, you don&amp;rsquo;t have that at all. Now, this is without windowing, so there is also a big jump between the last and first sample that we probably ought to do something about. Maybe if we apply a triangular window&amp;hellip;&lt;/p>
&lt;img src="https://graemephi.github.io/posts/triangle-dft/tristillbad.png" width="600" height="400" loading="lazy" />
&lt;p>I don&amp;rsquo;t know what I expected.&lt;/p>
&lt;p>Anyway, the reason I did all this was to see if anything interesting happened when you messed around with it. For example, we can swap out &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi mathvariant="script">F&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\mathcal{F}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathcal" style="margin-right:0.09931em;">F&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> for &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi mathvariant="script">T&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\mathcal{T}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathcal" style="margin-right:0.25417em;">T&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> in the &lt;a href="https://en.wikipedia.org/wiki/Convolution_theorem">convolution theorem&lt;/a>. Here is a gaussian filter applied in the &amp;ldquo;triangle domain&amp;rdquo;, with &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>σ&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>2&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">\sigma=2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">σ&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;/span>&lt;/span>&lt;/span> and with &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>σ&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>100&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">\sigma=100&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">σ&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>. &lt;a href="https://commons.wikimedia.org/wiki/File:Mandrill_Albert_September_2015_Zoo_Berlin_(2).jpg">Image from Wikimedia&lt;/a>.&lt;/p>
&lt;div style="display: flex; justify-content: center;">
&lt;img src="https://graemephi.github.io/posts/triangle-dft/mandril.png" width="963" height="321" loading="lazy" />
&lt;/div>
&lt;p>Interesting! I don&amp;rsquo;t really have an intuition for what&amp;rsquo;s happening on for &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>σ&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>2&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">\sigma = 2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">σ&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>. Larger values of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>σ&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\sigma&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.03588em;">σ&lt;/span>&lt;/span>&lt;/span>&lt;/span> look a bit more like what I expected.&lt;/p>
&lt;p>I also tried filtering audio this way. Removing high frequency triangle waves&amp;ndash;maybe I should give those a cute name like triquencies, because strictly speaking each one is multiple frequencies so I find it weird to refer to them that way&amp;ndash;introduces high harmonics of low frequency content in the signal. This sounds really nice if you have something with lots of harmonic material&amp;ndash;you get a nice wash of soft sawtooth buzz&amp;ndash;and pretty bad on something with sparse hamonics, like a plucked string. It would be nice to be able to use this for some audio effect, buuut &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi mathvariant="script">T&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\mathcal{T}&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathcal" style="margin-right:0.25417em;">T&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> isn&amp;rsquo;t linear, so you can&amp;rsquo;t use the usual methods to convolve small filters with long signals. Oh, well.&lt;/p>
&lt;h2 id="odds-and-ends">Odds and Ends&lt;/h2>
&lt;p>&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>O&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>n&lt;/mi>&lt;mi>log&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mi>n&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">O(n\log n)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">lo&lt;span style="margin-right:0.01389em;">g&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>. I didn&amp;rsquo;t spell out this claim, however the naive algorithm is &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>O&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msup>&lt;mi>n&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msup>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">O(n^2)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.064108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>. But if we skip triangle wave frequencies that are zero then we only need to do &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mfrac>&lt;mn>1&lt;/mn>&lt;mn>2&lt;/mn>&lt;/mfrac>&lt;mo>+&lt;/mo>&lt;mfrac>&lt;mn>1&lt;/mn>&lt;mn>4&lt;/mn>&lt;/mfrac>&lt;mo>+&lt;/mo>&lt;mfrac>&lt;mn>1&lt;/mn>&lt;mn>6&lt;/mn>&lt;/mfrac>&lt;mo>+&lt;/mo>&lt;mfrac>&lt;mn>1&lt;/mn>&lt;mn>8&lt;/mn>&lt;/mfrac>&lt;mo>+&lt;/mo>&lt;mi mathvariant="normal">.&lt;/mi>&lt;mi mathvariant="normal">.&lt;/mi>&lt;mi mathvariant="normal">.&lt;/mi>&lt;mo>+&lt;/mo>&lt;mfrac>&lt;mn>1&lt;/mn>&lt;mi>n&lt;/mi>&lt;/mfrac>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">n(\frac{1}{2} + \frac{1}{4} + \frac{1}{6} + \frac{1}{8} + ... + \frac{1}{n})&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.190108em;vertical-align:-0.345em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.845108em;">&lt;span style="top:-2.6550000000000002em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.394em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.345em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.190108em;vertical-align:-0.345em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.845108em;">&lt;span style="top:-2.6550000000000002em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">4&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.394em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.345em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.190108em;vertical-align:-0.345em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.845108em;">&lt;span style="top:-2.6550000000000002em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">6&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.394em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.345em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.190108em;vertical-align:-0.345em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.845108em;">&lt;span style="top:-2.6550000000000002em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">8&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.394em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.345em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.66666em;vertical-align:-0.08333em;">&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mord">.&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1.190108em;vertical-align:-0.345em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.845108em;">&lt;span style="top:-2.6550000000000002em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.394em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.345em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> operations. Apparently, that series grows logarithmically.&lt;/p>
&lt;p>What about non-band-limited triangle waves? Well, it turns out the band-limited version is close enough you can just stick it in a non-linear least-squares solver and it&amp;rsquo;ll find you something near machine precision, despite the discontinuous Jacobian. But it&amp;rsquo;s just too slow for large problems to be all that interesting. Another thought is that if the problem is just that aliasing causes us to lose orthogonality, then can we not just upsample until the first &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>N&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">N&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.68333em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.10903em;">N&lt;/span>&lt;/span>&lt;/span>&lt;/span> band-limited triangle waves are effectively identical to non-band-limited? But when I tried this it would produce better results up to around 64x upsampling, and then stop, not even close to the least-squares method. I don&amp;rsquo;t really understand this at all! It could just be the problem is ill-defined but it seems unlikely to me.&lt;/p>
&lt;p>At the top I said this would work for any periodic function: the DFT of any signal can be used in place of the fourier series of the triangle wave. But I&amp;rsquo;m not so interested in trying out other exotic functions like square waves as they would all have the problems laid out here, just because of how the series of functions was constructed. By band-limiting each basis function, we get a nice understanding of how the signal spans the fourier basis once shifted and sampled. But by that same token, only the complex exponential results in a series of orthogonal functions when constructed this way.&lt;/p>
&lt;p>Now I can stop thinking about this.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Notably, I&amp;rsquo;ve swapped out the &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>sin&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\sin&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.66786em;vertical-align:0em;">&lt;/span>&lt;span class="mop">sin&lt;/span>&lt;/span>&lt;/span>&lt;/span> for &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>cos&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">\cos&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mop">cos&lt;/span>&lt;/span>&lt;/span>&lt;/span>, which also makes &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">(&lt;/mo>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;msup>&lt;mo stretchy="false">)&lt;/mo>&lt;mi>k&lt;/mi>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">(-1)^k&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.099108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">−&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mclose">&lt;span class="mclose">)&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.849108em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> term you might be familiar with disappear. I do this because in the DFT, cosines with zero phase are represented by purely real frequency components. If we align our triangle wave with cosine, then our triangle wave is also made of purely real frequency components. This makes the discussion a little easier.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>This is basically &lt;a href="https://en.wikipedia.org/wiki/Matching_pursuit">matching pursuit&lt;/a> with a specific dictionary and a method to cheaply compute the next atom to remove.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>