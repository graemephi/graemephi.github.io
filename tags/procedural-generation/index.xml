<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>procedural generation on graeme. hello</title><link>https://graemephi.github.io/tags/procedural-generation/</link><description>Recent content in procedural generation on graeme. hello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 20 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://graemephi.github.io/tags/procedural-generation/index.xml" rel="self" type="application/rss+xml"/><item><title>i made a twitter bot: deep sky object</title><link>https://graemephi.github.io/posts/deep-sky-object/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://graemephi.github.io/posts/deep-sky-object/</guid><description>&lt;p>A couple months ago I set &lt;a href="https://twitter.com/tiny_dso">@tiny_dso&lt;/a> running. It&amp;rsquo;s a twitter art bot, which I guess is less of an exciting thing nowadays, but it&amp;rsquo;s an idea I&amp;rsquo;ve wanted to do for at least a few years now: turn &lt;a href="https://twitter.com/tiny_star_field">@tiny_star_field&lt;/a>'s tweets into computer generated imitations of astrophotography.&lt;/p>
&lt;p>tiny_star_field is getting a bit intermittent nowadays, so I set the bot to work it&amp;rsquo;s way backwards through tiny_star_field's old tweets. I wanted to make it something you could follow for a long time and still be surprised by, rather than something you&amp;rsquo;d scroll down once and see everything it&amp;rsquo;s capable of. We&amp;rsquo;ll see if I succeeded there; I&amp;rsquo;m not sure. It&amp;rsquo;s hard to tweak the parameters for that kind of thing, especially since when I&amp;rsquo;m working on it I generate hundreds of images, which skews my perception of what&amp;rsquo;s happening too much or not enough.&lt;/p>
&lt;p>It&amp;rsquo;s been running for a while, so I can let it speak for itself:&lt;/p>
&lt;div class="img-flex">
&lt;img src="https://graemephi.github.io/posts/deep-sky-object/EXeYst0XkAITLkB.png" width="480" height="480" />
&lt;img src="https://graemephi.github.io/posts/deep-sky-object/ERjccJlXYAEwypn.png" width="480" height="480" />
&lt;img src="https://graemephi.github.io/posts/deep-sky-object/ESHpGWuW4AEAUlJ.png" width="480" height="480" />
&lt;img src="https://graemephi.github.io/posts/deep-sky-object/ETJqBfgWoAIiTNk.png" width="480" height="480" />
&lt;img src="https://graemephi.github.io/posts/deep-sky-object/EShIIcjXQAEHntm.png" width="480" height="480" />
&lt;img src="https://graemephi.github.io/posts/deep-sky-object/EW0CH6_WkAQaKBw.png" width="480" height="480" />
&lt;/div>
&lt;p>I don&amp;rsquo;t have it in me to write more about it with a coherent structure so I&amp;rsquo;m just going to dump some notes on the implementation here. I wrote most of the code a couple years ago, returned to it a couple times, and really just decided to get it running on twitter recently. There&amp;rsquo;s probably some stuff I intended to do that I&amp;rsquo;ve completely forgotten about, so this is mostly technical details I can read out of the code.&lt;/p>
&lt;hr>
&lt;p>The bot part that talks to twitter is just javascript that lives on &lt;a href="https://tiny-dso.glitch.me/">glitch&lt;/a>. The &lt;a href="https://github.com/graemephi/starfield">image generator&lt;/a> is an executable that spits pngs out of standard out.&lt;/p>
&lt;hr>
&lt;p>It&amp;rsquo;s written in ion, the language Per Vognsen created for &lt;a href="https://github.com/pervognsen/bitwise">bitwise&lt;/a>. It&amp;rsquo;s basically C99, except you can omit type names sometimes, you use &lt;code>.&lt;/code> instead of &lt;code>-&amp;gt;&lt;/code>, and there is some notion of modules. Oh, and it has out of order declarations. I think when I started writing this the language was fully 2 weeks old. It looked pretty cool and I didn&amp;rsquo;t want to use any libraries in this project&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, so it fit my needs fine. As new and unfinished compilers go, it was pretty reliable. But it didn&amp;rsquo;t receive a whole lot of development past that. Coming back to the code to get the images onto twitter I found it had some bugs to work around, mostly to do with getting it to generate code that would compile on linux&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I found tweaking the image generation intolerable if it took more than half a second or so, so I spent some time optimising it. That means multi-threading, vector instructions, and a lot of profiling. This wasn&amp;rsquo;t a problem with ion, because it can generate C code, and will take your word for it if you tell it some function or type exists. Also, it uses the C preprocessor to get line information to debuggers (and profilers). All in all, very nice. Good language.&lt;/p>
&lt;hr>
&lt;p>I learned early on that the easiest way to render a passable looking star was to place a single white pixel on an otherwise blank texture and just use &lt;a href="https://graemephi.github.io/posts/calculating-lod/">mipmaps&lt;/a> to filter it for rendering. Rotating a shrunken, very bright, pixel gets you endless variation on how the stars look.&lt;/p>
&lt;p>Pixel values fall in the range &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo stretchy="false">]&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">[0, 1]&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mclose">]&lt;/span>&lt;/span>&lt;/span>&lt;/span> and, if you think on it, stars really ought to be much brighter than that. So this method works best if you just let your values overflow then adaptively crunch the image back down with post-processing. Most astrophotography has gone through reams of processing, anyway.&lt;/p>
&lt;hr>
&lt;p>All the &amp;ldquo;pixel shader&amp;rdquo;-like work is done using a pair of functions, &lt;code>pixel_iter_begin&lt;/code> and &lt;code>pixel_iter_next&lt;/code>. Rather than explaining what they do, here&amp;rsquo;s the code for drawing a texture:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">func &lt;span style="color:#a6e22e">draw_tex&lt;/span>(dest: Image&lt;span style="color:#f92672">*&lt;/span>, target: Rect, tex: Tex&lt;span style="color:#f92672">*&lt;/span>) {
lod :&lt;span style="color:#f92672">=&lt;/span> compute_lod_level(dest.size, target.size, tex.size);
&lt;span style="color:#66d9ef">for&lt;/span> (it :&lt;span style="color:#f92672">=&lt;/span> pixel_iter_begin(dest, target); pixel_iter_next(&lt;span style="color:#f92672">&amp;amp;&lt;/span>it)) {
rgba :&lt;span style="color:#f92672">=&lt;/span> tex_lookup_lod(tex, it.npos, lod);
&lt;span style="color:#f92672">*&lt;/span>it.pixel &lt;span style="color:#f92672">=&lt;/span> color_blend(&lt;span style="color:#f92672">*&lt;/span>it.pixel, rgba);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This would work in C, but it&amp;rsquo;d look like &lt;code>for (PixelIter it = ...; pixel_iter_next(&amp;amp;it);) {} &lt;/code>. Note that trailing semicolon&amp;ndash;&lt;code>next&lt;/code> gets called before, not after, every iteration. Now, this way of iterating over pixels is very general and so pretty slow. It just makes doing pixel-by-pixel stuff extremely low friction to write code for. I think most programmers would reach for function pointers or generics to separate the pixel shading code from the iteration, but it&amp;rsquo;s not necessary, and a pain to actually use. It turns out that the iterator code was not performance critical at all, so the overhead didn&amp;rsquo;t matter much, and the implementation is also very naive.&lt;/p>
&lt;p>The pixel iterator also takes care of multi-threading. Here&amp;rsquo;s the definition of the &lt;code>Image&lt;/code> struct:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">struct&lt;/span> Image {
pixels: Color&lt;span style="color:#f92672">*&lt;/span>;
size: int2;
wr: WritableRegion;
stride: &lt;span style="color:#66d9ef">int&lt;/span>;
offset: &lt;span style="color:#66d9ef">int&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>WritableRegion&lt;/code> allows the pixel iterator to clip the pixels being iterated over to the block the thread is responsible for rendering. The code that actually uses the pixel iterator doesn&amp;rsquo;t have to think about blocks or threads at all. It&amp;rsquo;s nice!&lt;/p>
&lt;p>The drawback is that if you want to draw into a side buffer before compositing into a destination buffer, then you end up allocating the full &lt;code>size&lt;/code> and only use a block in the middle somewhere. Avoiding that is what &lt;code>stride&lt;/code> and &lt;code>offset&lt;/code> are for. Usually, you&amp;rsquo;d sample an individual pixel like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>sample := img.pixels[pos.x + pos.y*img.x];
&lt;/code>&lt;/pre>&lt;p>Instead, I do this:&lt;/p>
&lt;pre tabindex="0">&lt;code>sample := img.pixels[pos.x + pos.y*img.stride - img.offset];
&lt;/code>&lt;/pre>&lt;p>This way, you can sample an image by talking about coordinates in &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;mn>0&lt;/mn>&lt;mo separator="true">,&lt;/mo>&lt;mn>1&lt;/mn>&lt;msup>&lt;mo stretchy="false">]&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">[0, 1]^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.064108em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">0&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mclose">&lt;span class="mclose">]&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> while the image only has storage allocated for &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mo stretchy="false">[&lt;/mo>&lt;mfrac>&lt;mn>3&lt;/mn>&lt;mn>8&lt;/mn>&lt;/mfrac>&lt;mo separator="true">,&lt;/mo>&lt;mfrac>&lt;mn>4&lt;/mn>&lt;mn>8&lt;/mn>&lt;/mfrac>&lt;msup>&lt;mo stretchy="false">]&lt;/mo>&lt;mn>2&lt;/mn>&lt;/msup>&lt;/mrow>&lt;annotation encoding="application/x-tex">[\frac{3}{8}, \frac{4}{8}]^2&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1.190108em;vertical-align:-0.345em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.845108em;">&lt;span style="top:-2.6550000000000002em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">8&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.394em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">3&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.345em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mpunct">,&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mopen nulldelimiter">&lt;/span>&lt;span class="mfrac">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.845108em;">&lt;span style="top:-2.6550000000000002em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">8&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.23em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="frac-line" style="border-bottom-width:0.04em;">&lt;/span>&lt;/span>&lt;span style="top:-3.394em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mtight">4&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.345em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose nulldelimiter">&lt;/span>&lt;/span>&lt;span class="mclose">&lt;span class="mclose">]&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.8141079999999999em;">&lt;span style="top:-3.063em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span> (for example), and all it takes is an extra subtraction.&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;hr>
&lt;p>All the star colours are chosen by linearly interpolating between RGB values obtained by colour-picking from &lt;a href="https://en.wikipedia.org/wiki/Stellar_classification#/media/File:TernaryColorTmap.PNG">wikipedia&lt;/a>. They&amp;rsquo;re pretty close so I never had to do anything fancy involving splines or colour space transformations.&lt;/p>
&lt;hr>
&lt;p>Most of the look comes from blurring the entire image and layering the blurred and unblurred parts together in arbitrary ways. Think blend modes in image editors. It turns out it&amp;rsquo;s pretty easy to write a &lt;a href="https://fgiesen.wordpress.com/2012/07/30/fast-blurs-1/">fast&lt;/a> &lt;a href="https://fgiesen.wordpress.com/2012/08/01/fast-blurs-2/">blur&lt;/a>, and you don&amp;rsquo;t even have to think about how to vectorise it because everything is in 4 independent colour components already.&lt;/p>
&lt;p>The diffraction spikes are blurs, too. I think a lot of people jump to the fourier transform to do diffraction spikes but I couldn&amp;rsquo;t be bothered with that&amp;ndash;just take a box filter with a hole cut out of the middle and repeat it a few times. Same principle as using iterated box filters to approximate a gaussian blur, as in the links above, but non-separable this time, so you need to do vertical and horizontal passes both on the original image (i.e., not in series).&lt;/p>
&lt;p>If you look at actual diffraction spikes you can see different colours get diffracted more or less. I think this is probably the same principle as &lt;a href="https://en.wikipedia.org/wiki/Surface_wave#Ground_wave">ground waves&lt;/a>, where lower frequency radio waves diffract around the surface of the Earth more than higher frequency waves. So, I use different sizes of filter on each colour component; larger for larger wavelengths, I think, but you can only do so much in RGB.&lt;/p>
&lt;p>Honestly, though, the diffraction code is kind of terrible. Every time I think about it I think of a better way to implement it. For example, I haven&amp;rsquo;t vectorised it, because the memory accesses are different for each colour component. But to get diffractions at an angle I do a song and dance where I rotate a copy of the entire image to another buffer&amp;ndash;this would be a good time to rearrange the data into colour planes to make it vectorisable: multiple rows of a plane at once. I could even reuse the other blur code at that point, and implement the convolution &lt;code>(A - B)x&lt;/code> as &lt;code>Ax - Bx&lt;/code>. But I don&amp;rsquo;t! And I never will, now.&lt;/p>
&lt;hr>
&lt;p>The nebulas are a hot mess of noise functions, mostly &lt;a href="https://thebookofshaders.com/12/">cellular noise&lt;/a> with a healthy dose of &lt;a href="https://iquilezles.org/www/articles/warp/warp.htm">domain warping&lt;/a>. It all happens on a 2D plane; I didn&amp;rsquo;t want to think about 3D volumetric anything for this project.&lt;/p>
&lt;p>I do the cellular noise in fixed-point arithmetic. This was out of curiosity more anything else; the implementation comes pretty naturally from wanting to use a &lt;a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=madd&amp;amp;techs=SSE2&amp;amp;expand=3505">certain SSE2 instruction&lt;/a>. I&amp;rsquo;d like to write more about it, but not in this post.&lt;/p>
&lt;hr>
&lt;p>By the way, &lt;a href="https://glitch.com/">glitch&lt;/a> is pretty cool. It spins up an instance of who-knows-what for you and clang is just sitting there, waiting to compile whatever you want. A very old version of clang. That doesn&amp;rsquo;t have the intrinsics I use. Well, it has gcc, too.&lt;/p>
&lt;p>If you&amp;rsquo;ve scrolled all the way down here and only now have decided you want the bot&amp;rsquo;s twitter, &lt;a href="https://twitter.com/tiny_dso">here you go&lt;/a>.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Except &lt;a href="https://github.com/nothings/stb">stb_image_write.h&lt;/a> for the pngs. On Windows, I don&amp;rsquo;t write pngs, but render to a buffer managed by SDL. So they both have one dependency, but it&amp;rsquo;s a different dependency, I guess.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>I think most, if not all, of those bugs have been fixed in &lt;a href="https://github.com/uucidl/bitwise">this fork&lt;/a>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>You could also shunt the &lt;code>pixels&lt;/code> pointer off into no-mans-land and pray you get all the new weird boundary conditions right.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>