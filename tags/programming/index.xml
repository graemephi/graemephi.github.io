<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on graeme. hello</title><link>https://graemephi.github.io/tags/programming/</link><description>Recent content in programming on graeme. hello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://graemephi.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Difference Decay</title><link>https://graemephi.github.io/posts/difference-decay/</link><pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate><guid>https://graemephi.github.io/posts/difference-decay/</guid><description>&lt;p>Here&amp;rsquo;s a variation on the &lt;a href="https://theorangeduck.com/page/spring-roll-call">damper&lt;/a> I keep coming up with uses for. I find my code that uses it a bit subtle and annoying to figure out, hence this post.&lt;/p>
&lt;p>That theorangeduck post is about springs, which could be an interesting extension to this, but this post is setting our sights lower.&lt;/p>
&lt;p>My first use for this was to clean up a noisy/unreliable clock by using a high resolution clock, taking the noisy clock&amp;rsquo;s drift as authoritative. But I think of it more generally, as combining two signals &lt;code>s&lt;/code> and &lt;code>n&lt;/code> to produce a third with the short-term character of &lt;code>s&lt;/code> but the long-term average of &lt;code>n&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">float&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> &lt;span style="color:#f92672">*&lt;/span>accumulator, &lt;span style="color:#66d9ef">float&lt;/span> dt, &lt;span style="color:#66d9ef">float&lt;/span> s, &lt;span style="color:#66d9ef">float&lt;/span> n)
{
&lt;span style="color:#66d9ef">float&lt;/span> acc &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>accumulator;
&lt;span style="color:#66d9ef">float&lt;/span> err &lt;span style="color:#f92672">=&lt;/span> s &lt;span style="color:#f92672">-&lt;/span> n;
acc &lt;span style="color:#f92672">+=&lt;/span> err;
acc &lt;span style="color:#f92672">*=&lt;/span> expf(&lt;span style="color:#f92672">-&lt;/span>dt);
&lt;span style="color:#66d9ef">float&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> n &lt;span style="color:#f92672">+&lt;/span> acc;
acc &lt;span style="color:#f92672">-=&lt;/span> err;
&lt;span style="color:#f92672">*&lt;/span>accumulator &lt;span style="color:#f92672">=&lt;/span> acc;
&lt;span style="color:#66d9ef">return&lt;/span> x;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>accumulator&lt;/code> is initialized to &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;annotation encoding="application/x-tex">0&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.64444em;vertical-align:0em;">&lt;/span>&lt;span class="mord">0&lt;/span>&lt;/span>&lt;/span>&lt;/span> and we expect &lt;code>dt&lt;/code> to be small and positive, so you can mentally substitute &lt;code>expf(-dt)&lt;/code> with &lt;code>1 - dt&lt;/code>.&lt;/p>
&lt;p>The easiest way to explain it is to work backwards. The &lt;code>+=&lt;/code>, &lt;code>-=&lt;/code> pair removes a delay term (&lt;code>err_prev&lt;/code> in the following), and is equivalent to:&lt;/p>
&lt;pre tabindex="0">&lt;code>err = s - n;
acc = (acc + (err - err_prev)) * expf(-dt);
err_prev = err;
x = n + acc;
&lt;/code>&lt;/pre>&lt;p>To see what this is doing, suppose we don&amp;rsquo;t apply the &lt;code>expf(-dt)&lt;/code> decay factor. Then, over all &lt;code>s&lt;/code> and &lt;code>n&lt;/code>, we get something like &lt;code>cumsum([0, diff(s - n)])&lt;/code>, which is a no-op. Written out,&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;msub>&lt;mtext>acc&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;msub>&lt;mtext>acc&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo>+&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;mi>i&lt;/mi>&lt;/munderover>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>k&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>0&lt;/mn>&lt;/mrow>&lt;mi>i&lt;/mi>&lt;/munderover>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>k&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;munderover>&lt;mo>∑&lt;/mo>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>=&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;mi>i&lt;/mi>&lt;/munderover>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mrow>&lt;mi>k&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;msub>&lt;mi>s&lt;/mi>&lt;mi>i&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;msub>&lt;mi>n&lt;/mi>&lt;mi>i&lt;/mi>&lt;/msub>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;annotation encoding="application/x-tex">
\begin{aligned}
\text{acc}_i &amp;amp;= \text{acc}_{i-1} + (\text{err}_i - \text{err}_{i-1}) \\
&amp;amp;= \sum_{k=0}^i (\text{err}_k - \text{err}_{k-1}) \\
&amp;amp;= \sum_{k=0}^i \text{err}_k - \sum_{k=1}^i \text{err}_{k-1} \\
&amp;amp;= \text{err}_i \\
&amp;amp;= s_i - n_i
\end{aligned}
&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:11.327564em;vertical-align:-5.413782em;">&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-r">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:5.913782em;">&lt;span style="top:-8.885451em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">acc&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-6.413782em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;span style="top:-0.557887em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;span style="top:0.942113em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:5.413782em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="col-align-l">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:5.913782em;">&lt;span style="top:-8.885451em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">acc&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-6.413782em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8116690000000002em;">&lt;span style="top:-1.8478869999999998em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.0500049999999996em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.300005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.302113em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3361079999999999em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8116690000000002em;">&lt;span style="top:-1.8478869999999998em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.0500049999999996em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.300005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.302113em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.33610799999999996em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mop op-limits">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.8116690000000002em;">&lt;span style="top:-1.8478869999999998em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mrel mtight">=&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-3.0500049999999996em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span>&lt;span class="mop op-symbol large-op">∑&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-4.300005em;margin-left:0em;">&lt;span class="pstrut" style="height:3.05em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.302113em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.3361079999999999em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight" style="margin-right:0.03148em;">k&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-0.557887em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:0.942113em;">&lt;span class="pstrut" style="height:3.811669em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">s&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:5.413782em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>so our value for &lt;code>x&lt;/code> would always equal the most recent &lt;code>s&lt;/code>. Likewise, if we zeroed out &lt;code>acc&lt;/code> completely, the damper would return &lt;code>n&lt;/code> every time.&lt;/p>
&lt;p>Applying the decay to &lt;code>acc&lt;/code> lets us decay &lt;em>old updates&lt;/em> to the difference between &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">s&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>. If &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">s&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span> grow at the different rates, this shrinks the gap between them and stops them drifting apart. But if &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span> updates less frequently or with jitter, this fills in the missing/incorrect detail with &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">s&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;/span>&lt;/span>&lt;/span>.&lt;/p>
&lt;p>If you care about tuning the decay factor or having something more momentum than exponential decay, check out the &lt;a href="https://theorangeduck.com/page/spring-roll-call">theorangeduck post&lt;/a>. It&amp;rsquo;s good!! One thing to note is this damper doesn&amp;rsquo;t have any stability problems for large &lt;code>dt&lt;/code> that I&amp;rsquo;m aware of, you just lose more history.&lt;/p>
&lt;p>While retreading the maths for this post and trying to see if I could get it to look more intuitively damper-y, I noticed that if you scale the error difference term by the inverse of the decay to cancel out the first decay you get&lt;/p>
&lt;p>&lt;span class="katex-display">&lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em">&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;msub>&lt;mtext>acc&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;mo stretchy="false">[&lt;/mo>&lt;msub>&lt;mtext>acc&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo>+&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;mi>exp&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mi>d&lt;/mi>&lt;mi>t&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo stretchy="false">]&lt;/mo>&lt;mi>exp&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mo>−&lt;/mo>&lt;mi>d&lt;/mi>&lt;mi>t&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;mtr>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;mtd>&lt;mstyle scriptlevel="0" displaystyle="true">&lt;mrow>&lt;mrow>&lt;/mrow>&lt;mo>=&lt;/mo>&lt;msub>&lt;mtext>acc&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mi>exp&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;mo>−&lt;/mo>&lt;mi>d&lt;/mi>&lt;mi>t&lt;/mi>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>+&lt;/mo>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mi>i&lt;/mi>&lt;/msub>&lt;mo>−&lt;/mo>&lt;msub>&lt;mtext>err&lt;/mtext>&lt;mrow>&lt;mi>i&lt;/mi>&lt;mo>−&lt;/mo>&lt;mn>1&lt;/mn>&lt;/mrow>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;/mstyle>&lt;/mtd>&lt;/mtr>&lt;/mtable>&lt;annotation encoding="application/x-tex">
\begin{aligned}
\text{acc}_i &amp;amp; = [\text{acc}_{i-1}+(\text{err}_i - \text{err}_{i-1}) \exp(dt)] \exp(-dt) \\
&amp;amp;= \text{acc}_{i-1} \exp(-dt) +(\text{err}_i - \text{err}_{i-1})
\end{aligned}
&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;">&lt;/span>&lt;span class="mord">&lt;span class="mtable">&lt;span class="col-align-r">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.7500000000000002em;">&lt;span style="top:-3.91em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">acc&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.41em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.2500000000000002em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="col-align-l">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.7500000000000002em;">&lt;span style="top:-3.91em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mopen">[&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">acc&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">exp&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mclose">]&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">exp&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">−&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="top:-2.41em;">&lt;span class="pstrut" style="height:3em;">&lt;/span>&lt;span class="mord">&lt;span class="mord">&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">=&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">acc&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.16666666666666666em;">&lt;/span>&lt;span class="mop">exp&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">−&lt;/span>&lt;span class="mord mathdefault">d&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">+&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.31166399999999994em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mord">&lt;span class="mord text">&lt;span class="mord">err&lt;/span>&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.311664em;">&lt;span style="top:-2.5500000000000003em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">&lt;span class="mord mathdefault mtight">i&lt;/span>&lt;span class="mbin mtight">−&lt;/span>&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.208331em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:1.2500000000000002em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/p>
&lt;p>which looks similar to the simple damper:&lt;/p>
&lt;pre tabindex="0">&lt;code>x = lerp(x, g, 1.0f - expf(-dt))
= g + (x - g)*expf(-dt)
&lt;/code>&lt;/pre>&lt;p>Instead of repeatedly folding &lt;code>g&lt;/code> into &lt;code>x&lt;/code>, we&amp;rsquo;ve isolated &lt;code>x - g&lt;/code> as &lt;code>acc&lt;/code>, and we repeatedly fold updates to &lt;code>g&lt;/code> into &lt;code>acc&lt;/code>, which we decay. This idea of isolating the difference is what I was thinking about when I came up with this; it&amp;rsquo;s really another &lt;a href="https://graemephi.github.io/posts/dumb-tricks-with-phase-inversion">phase inversion trick&lt;/a>. So maybe applying this scaling factor is more correct?&lt;/p>
&lt;p>Anyway, I came up with this to fix a decades old visual stuttering issue in the rhythm game Etterna, a fork of Stepmania. They position objects on the screen by repeatedly querying the system audio API for it&amp;rsquo;s playback position. This turns out to work exactly as you&amp;rsquo;d hope on some hardware and APIs, and really not work at all on others. The game is visually stripped down enough that this looks like it has bad frame pacing issues, but the issue was entirely due to the reported audio position. There are variations here (figured out with &lt;a href="https://github.com/wolfpld/tracy">Tracy&lt;/a>):&lt;/p>
&lt;ul>
&lt;li>
&lt;p>WaveOut, interestingly, appears to directly report whatever the hardware driver tells it. This means it works great for some devices and terrible on others. I first hit this issue when a driver update for my USB sound card changed the behaviour here, introducing jitter you could &lt;em>see&lt;/em>. On the other hand, with my motherboard&amp;rsquo;s audio you instead see nice steady drift away from &lt;code>QueryPerformanceCounter&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DirectSound appears to correct for drift and jitter, and this turns out to be bad. When you sample playback positions it looks to be in sync with wall time, but audio hardware &lt;em>does&lt;/em> drift, and DirectSound eventually corrects for this by jumping. Which means a visible jump in the game. Furthermore, it only reports a new sample position every 10ms, and at the point you are querying you have no idea how long ago the update to the position occurred. You basically end up with a few milliseconds of jitter, unless you&amp;rsquo;re running at very high frame rates.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ALSA and PulseAudio appear to have no way to query this, so you only know the time you submitted the last buffer. This is probably fine, and possibly none of this would have been a problem if the game never queried the other APIs in the first place. You can get a continuous estimate by extrapolating from the submission time, which I suspect is what you get in the good WaveOut case. Due to the architecture of the game, this ended up with the same unknown update time issue as DirectSound.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>And possibly more, but I stopped looking.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So I wanted something that would eliminate jitter for all of these, without any parameter tuning, and not degrade the ideal &amp;lsquo;good driver under WaveOut&amp;rsquo; case in any way. This worked well.&lt;/p>
&lt;p>One thing here worth mentioning, where &lt;code>s&lt;/code> is high-quality time from &lt;code>QueryPerformanceCounter&lt;/code> or equivalent and &lt;code>n&lt;/code> is low-quality time from somewhere else, is that we only have samples &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">s(t_0)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">n(t_1)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>. That is, we do not actually know the values of &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>t&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">t&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.61508em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">t&lt;/span>&lt;/span>&lt;/span>&lt;/span>, and we just assume &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo>≈&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;/mrow>&lt;annotation encoding="application/x-tex">t_0 \approx t_1&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.76508em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;span class="mrel">≈&lt;/span>&lt;span class="mspace" style="margin-right:0.2777777777777778em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:0.76508em;vertical-align:-0.15em;">&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>. For this problem in particular, you might want to take a third sample &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">s(t_2)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> and check that &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>2&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;mo>−&lt;/mo>&lt;mi>s&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>0&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">s(t_2) - s(t_0)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">2&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;span class="mbin">−&lt;/span>&lt;span class="mspace" style="margin-right:0.2222222222222222em;">&lt;/span>&lt;/span>&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">0&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> is sufficiently small before using &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;msub>&lt;mi>t&lt;/mi>&lt;mn>1&lt;/mn>&lt;/msub>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">n(t_1)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">&lt;span class="mord mathdefault">t&lt;/span>&lt;span class="msupsub">&lt;span class="vlist-t vlist-t2">&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.30110799999999993em;">&lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;">&lt;span class="pstrut" style="height:2.7em;">&lt;/span>&lt;span class="sizing reset-size6 size3 mtight">&lt;span class="mord mtight">1&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="vlist-s">​&lt;/span>&lt;/span>&lt;span class="vlist-r">&lt;span class="vlist" style="height:0.15em;">&lt;span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span>, as your &lt;a href="https://en.wikipedia.org/wiki/Time_slice">time slice&lt;/a> can run out between sampling &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>s&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">s&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">s&lt;/span>&lt;/span>&lt;/span>&lt;/span> and &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.43056em;vertical-align:0em;">&lt;/span>&lt;span class="mord mathdefault">n&lt;/span>&lt;/span>&lt;/span>&lt;/span>.&lt;/p>
&lt;p>I wish I could say something about control theory here, since this kind of thing seems to be right in its wheelhouse. But I don&amp;rsquo;t really know any.&lt;/p></description></item><item><title>stb_ds: string interning</title><link>https://graemephi.github.io/posts/stb_ds-string-interning/</link><pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate><guid>https://graemephi.github.io/posts/stb_ds-string-interning/</guid><description>&lt;p>&lt;a href="https://github.com/nothings/stb">stb_ds&lt;/a> is a generic container library for C. It was probably from seeing the same technique in &lt;a href="https://github.com/pervognsen/bitwise">bitwise&lt;/a>, but I&amp;rsquo;ve had it at the back of my mind for a while now that one of the good use cases for stb_ds was easy string interning. But it&amp;rsquo;s not mentioned anywhere, not even in the &lt;a href="http://nothings.org/stb_ds">gentle introduction&lt;/a>! Well, the pieces are there, but how to put them together is a little subtle.&lt;/p>
&lt;p>By the way, string interning is when you keep at most one copy of a given string in memory, and use immutable references to such copies as your string value type. In return, you get &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>O&lt;/mi>&lt;mo stretchy="false">(&lt;/mo>&lt;mn>1&lt;/mn>&lt;mo stretchy="false">)&lt;/mo>&lt;/mrow>&lt;annotation encoding="application/x-tex">O(1)&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:1em;vertical-align:-0.25em;">&lt;/span>&lt;span class="mord mathdefault" style="margin-right:0.02778em;">O&lt;/span>&lt;span class="mopen">(&lt;/span>&lt;span class="mord">1&lt;/span>&lt;span class="mclose">)&lt;/span>&lt;/span>&lt;/span>&lt;/span> string equality and you use less memory.&lt;/p>
&lt;p>You can do string interning with a single stb_ds hash table, and that&amp;rsquo;s it. I&amp;rsquo;m pretty sure stb_ds is designed to ensure that this is possible&amp;ndash;you can&amp;rsquo;t do it with most hash tables. Several features fitting together just right makes it work.&lt;/p>
&lt;p>First, table entries are stored contiguously in memory, and their order is stable, even when the hash table is resized. This is in constrast to other hash table implementations that store their data in sparse arrays. This isn&amp;rsquo;t just an implementation detail but a documented part of the API. For more on why you might want a hash table that does this, check out &lt;a href="https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html">this blog post from PyPy&lt;/a>.&lt;/p>
&lt;p>Second, stb_ds can hash strings for use as key types. Once you have string interning, you only need primitive type keys for your hash tables. But if you don&amp;rsquo;t have proper string keys before you have interning, you need to figure out what you&amp;rsquo;re doing. We don&amp;rsquo;t have to worry about it.&lt;/p>
&lt;p>Third, string hash tables can be configured to store their keys in a memory arena managed by the hash table. This means we won&amp;rsquo;t have to manage the intern pool memory at all. The arena gives us stable pointers and minimises the number of calls to the underlying allocator.&lt;/p>
&lt;p>And lastly, although stb_ds&amp;rsquo;s hash table maps keys to values, it&amp;rsquo;s possible to use it without specifying values at all. (And you don&amp;rsquo;t waste any space doing this.)&lt;/p>
&lt;p>All of these are useful in their own right! But check this out:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C" data-lang="C">&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> { &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>key; } Intern;
&lt;span style="color:#66d9ef">static&lt;/span> Intern &lt;span style="color:#f92672">*&lt;/span>interns &lt;span style="color:#f92672">=&lt;/span> NULL;
ptrdiff_t &lt;span style="color:#a6e22e">intern&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>str)
{
&lt;span style="color:#66d9ef">if&lt;/span> (str &lt;span style="color:#f92672">==&lt;/span> NULL) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span> (interns &lt;span style="color:#f92672">==&lt;/span> NULL) {
sh_new_arena(interns);
}
ptrdiff_t result &lt;span style="color:#f92672">=&lt;/span> shgeti(interns, str);
&lt;span style="color:#66d9ef">if&lt;/span> (result &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>) {
shputs(interns, (Intern) { .key &lt;span style="color:#f92672">=&lt;/span> str });
result &lt;span style="color:#f92672">=&lt;/span> shlen(interns) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">return&lt;/span> result;
}
&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">from_intern&lt;/span>(ptrdiff_t handle)
{
&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>result &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;span style="color:#66d9ef">if&lt;/span> (handle &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> handle &lt;span style="color:#f92672">&amp;lt;&lt;/span> shlen(interns)) {
result &lt;span style="color:#f92672">=&lt;/span> interns[handle].key;
}
&lt;span style="color:#66d9ef">return&lt;/span> result;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Table entries go into the hash table as just a key, without a corresponding value. To get a value to use as a handle, we use their index in the table&amp;rsquo;s key storage. When we want to turn a handle back into &lt;code>char *&lt;/code>, we index off the &lt;code>interns&lt;/code> pointer.&lt;/p>
&lt;p>Since pointers to the interned strings are stable, you might want to hand out those pointers directly, instead of handles. On the other hand, pointer-sized handles are somewhat big on 64-bit systems, so there you might want to use a smaller handle type. On 64-bit, the above code is a bit worst-of-both-worlds, but I wanted to show the idea as cleanly as possible.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>If you&amp;rsquo;re using a version of stb_ds older than v0.65 the above code won&amp;rsquo;t work, as using &lt;code>shputs&lt;/code> will store the pointer in &lt;code>key&lt;/code> directly instead of a pointer to the copy it will allocate from the arena. Prior to v0.65, you had to manage the intern pool&amp;rsquo;s memory directly. That&amp;rsquo;s okay, because stb_ds exposes its internal memory arena functionality as part of the API. The idea is the same, just slightly less convenient.&lt;/p>
&lt;p>Also, I first call &lt;code>shgeti&lt;/code> there, but you really ought to be able to get away with just calling &lt;code>shputs&lt;/code> and calling it a day. If you use pointers instead of handles this works, because &lt;code>shputs&lt;/code> returns the inserted key. But I&amp;rsquo;m not convinced you can rely on that for future versions.&lt;/p>
&lt;p>And&amp;hellip; I think that&amp;rsquo;s it.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>If they&amp;rsquo;re smaller than pointer-sized, handles can overflow. I figure if I post code it should be working code that can be copy-pasted somewhere without blowing up some indeterminate time in the future. Although, I&amp;rsquo;m not keen on the behaviour it has with null strings and invalid handles. I feel like both of those indicate that bad things are happening, and returning null pointers is just adding fuel to the fire.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>